{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Clyde is a modern, type-hinted Python library for seamless interaction with the Discord Webhook API.</p> <p>It's lightweight, developer-friendly, and supports advanced features like Components and Embeds.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully type-hinted for an excellent developer experience</li> <li>Input validation powered by Pydantic</li> <li>Support for all Webhook-compatible Components</li> <li>Granular customization of rich Embeds</li> <li>Helpers for Discord-flavored markdown, including timestamps</li> <li>Compatible with both synchronous and asynchronous HTTP requests</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>Clyde requires Python 3.13 or later.</p> <p>Install with uv (recommended):</p> <pre><code>uv add discord-clyde\n</code></pre> <p>Alternatively, install with pip:</p> <pre><code>pip install discord-clyde\n</code></pre>"},{"location":"component/","title":"Component","text":"<p>Define the Component class and its associates.</p> <p>Define the Action Row class and its associates.</p> <p>Define the Button class and its associates.</p> <p>Define the Container class and its associates.</p> <p>Define the File class and its associates.</p>"},{"location":"component/#clyde.component.Component","title":"<code>Component</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Discord Component.</p> <p>Components allow you to style and structure your messages. They are interactive elements that can create rich user experiences in your Discord Webhooks.</p> <p>https://discord.com/developers/docs/components/reference#what-is-a-component</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The type of the Component.</p> Source code in <code>clyde/component.py</code> <pre><code>class Component(BaseModel):\n    \"\"\"\n    Represent a Discord Component.\n\n    Components allow you to style and structure your messages. They are interactive elements\n    that can create rich user experiences in your Discord Webhooks.\n\n    https://discord.com/developers/docs/components/reference#what-is-a-component\n\n    Attributes:\n        type (ComponentTypes): The type of the Component.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Component class.\"\"\"\n\n    type: ComponentTypes = Field(...)\n    \"\"\"The type of the Component.\"\"\"\n</code></pre>"},{"location":"component/#clyde.component.Component.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Component class.</p>"},{"location":"component/#clyde.component.Component.type","title":"<code>type = Field(...)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The type of the Component.</p>"},{"location":"component/#clyde.component.ComponentTypes","title":"<code>ComponentTypes</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Define the available types of Discord Components.</p> <p>https://discord.com/developers/docs/components/reference#component-object-component-types</p> <p>Attributes:</p> Name Type Description <code>ACTION_ROW</code> <code>int</code> <p>Container to display a row of interactive Components.</p> <code>BUTTON</code> <code>int</code> <p>Button object.</p> <code>SECTION</code> <code>int</code> <p>Container to display text alongside an Accessory Component.</p> <code>TEXT_DISPLAY</code> <code>int</code> <p>Markdown text.</p> <code>THUMBNAIL</code> <code>int</code> <p>Small image that can be used as an Accessory.</p> <code>MEDIA_GALLERY</code> <code>int</code> <p>Display images and other media.</p> <code>FILE</code> <code>int</code> <p>Displays an attached file.</p> <code>SEPERATOR</code> <code>int</code> <p>Component to add vertical padding between other Components.</p> <code>CONTAINER</code> <code>int</code> <p>Container that visually groups a set of Components.</p> Source code in <code>clyde/component.py</code> <pre><code>class ComponentTypes(IntEnum):\n    \"\"\"\n    Define the available types of Discord Components.\n\n    https://discord.com/developers/docs/components/reference#component-object-component-types\n\n    Attributes:\n        ACTION_ROW (int): Container to display a row of interactive Components.\n\n        BUTTON (int): Button object.\n\n        SECTION (int): Container to display text alongside an Accessory Component.\n\n        TEXT_DISPLAY (int): Markdown text.\n\n        THUMBNAIL (int): Small image that can be used as an Accessory.\n\n        MEDIA_GALLERY (int): Display images and other media.\n\n        FILE (int): Displays an attached file.\n\n        SEPERATOR (int): Component to add vertical padding between other Components.\n\n        CONTAINER (int): Container that visually groups a set of Components.\n    \"\"\"\n\n    ACTION_ROW = 1\n    \"\"\"Container to display a row of interactive Components.\"\"\"\n\n    BUTTON = 2\n    \"\"\"Button object.\"\"\"\n\n    SECTION = 9\n    \"\"\"Container to display text alongside an Accessory Component.\"\"\"\n\n    TEXT_DISPLAY = 10\n    \"\"\"Markdown text.\"\"\"\n\n    THUMBNAIL = 11\n    \"\"\"Small image that can be used as an Accessory.\"\"\"\n\n    MEDIA_GALLERY = 12\n    \"\"\"Display images and other media.\"\"\"\n\n    FILE = 13\n    \"\"\"Displays an attached file.\"\"\"\n\n    SEPERATOR = 14\n    \"\"\"Component to add vertical padding between other Components.\"\"\"\n\n    CONTAINER = 17\n    \"\"\"Container that visually groups a set of Components.\"\"\"\n</code></pre>"},{"location":"component/#clyde.component.ComponentTypes.ACTION_ROW","title":"<code>ACTION_ROW = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Container to display a row of interactive Components.</p>"},{"location":"component/#clyde.component.ComponentTypes.BUTTON","title":"<code>BUTTON = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Button object.</p>"},{"location":"component/#clyde.component.ComponentTypes.CONTAINER","title":"<code>CONTAINER = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Container that visually groups a set of Components.</p>"},{"location":"component/#clyde.component.ComponentTypes.FILE","title":"<code>FILE = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Displays an attached file.</p>"},{"location":"component/#clyde.component.ComponentTypes.MEDIA_GALLERY","title":"<code>MEDIA_GALLERY = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display images and other media.</p>"},{"location":"component/#clyde.component.ComponentTypes.SECTION","title":"<code>SECTION = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Container to display text alongside an Accessory Component.</p>"},{"location":"component/#clyde.component.ComponentTypes.SEPERATOR","title":"<code>SEPERATOR = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Component to add vertical padding between other Components.</p>"},{"location":"component/#clyde.component.ComponentTypes.TEXT_DISPLAY","title":"<code>TEXT_DISPLAY = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Markdown text.</p>"},{"location":"component/#clyde.component.ComponentTypes.THUMBNAIL","title":"<code>THUMBNAIL = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Small image that can be used as an Accessory.</p>"},{"location":"component/#clyde.components.action_row.ActionRow","title":"<code>ActionRow</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Action Row type.</p> <p>An Action Row is a top-level layout component used in messages and modals. Action Rows can contain up to 5 contextually grouped Link Buttons.</p> <p>https://discord.com/developers/docs/components/reference#action-row</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.ACTION_ROW.</p> <code>components</code> <code>list[LinkButton]</code> <p>Up to 5 interactive Link Button Components.</p> Source code in <code>clyde/components/action_row.py</code> <pre><code>class ActionRow(Component):\n    \"\"\"\n    Represent a Discord Component of the Action Row type.\n\n    An Action Row is a top-level layout component used in messages and modals.\n    Action Rows can contain up to 5 contextually grouped Link Buttons.\n\n    https://discord.com/developers/docs/components/reference#action-row\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.ACTION_ROW.\n\n        components (list[LinkButton]): Up to 5 interactive Link Button Components.\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.ACTION_ROW, frozen=True)\n    \"\"\"The value of ComponentTypes.ACTION_ROW.\"\"\"\n\n    components: list[LinkButton] | None = Field(default=None, max_length=5)\n    \"\"\"Up to 5 interactive Link Button Components.\"\"\"\n\n    def add_component(\n        self: Self, component: LinkButton | list[LinkButton]\n    ) -&gt; \"ActionRow\":\n        \"\"\"\n        Add one or more Link Button Components to the Action Row.\n\n        Arguments:\n            component (LinkButton | list[LinkButton]): A Link Button or list of Link Buttons\n                to add to the Action Row.\n\n        Returns:\n            self (ActionRow): The modified Action Row instance.\n        \"\"\"\n        if not self.components:\n            self.components = []\n\n        if isinstance(component, list):\n            self.components.extend(component)\n        else:\n            self.components.append(component)\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.action_row.ActionRow.components","title":"<code>components = Field(default=None, max_length=5)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Up to 5 interactive Link Button Components.</p>"},{"location":"component/#clyde.components.action_row.ActionRow.type","title":"<code>type = Field(default=ComponentTypes.ACTION_ROW, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.ACTION_ROW.</p>"},{"location":"component/#clyde.components.action_row.ActionRow.add_component","title":"<code>add_component(component)</code>","text":"<p>Add one or more Link Button Components to the Action Row.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>LinkButton | list[LinkButton]</code> <p>A Link Button or list of Link Buttons to add to the Action Row.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>ActionRow</code> <p>The modified Action Row instance.</p> Source code in <code>clyde/components/action_row.py</code> <pre><code>def add_component(\n    self: Self, component: LinkButton | list[LinkButton]\n) -&gt; \"ActionRow\":\n    \"\"\"\n    Add one or more Link Button Components to the Action Row.\n\n    Arguments:\n        component (LinkButton | list[LinkButton]): A Link Button or list of Link Buttons\n            to add to the Action Row.\n\n    Returns:\n        self (ActionRow): The modified Action Row instance.\n    \"\"\"\n    if not self.components:\n        self.components = []\n\n    if isinstance(component, list):\n        self.components.extend(component)\n    else:\n        self.components.append(component)\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.button.Button","title":"<code>Button</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Button, an interactive Component that can only be used in messages.</p> <p>A Button creates clickable elements that users can interact with. Buttons must be placed inside an Action Row or a Section's Accessory field.</p> <p>https://discord.com/developers/docs/components/reference#button</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.BUTTON.</p> <code>style</code> <code>ButtonStyles</code> <p>A Button Style.</p> Source code in <code>clyde/components/button.py</code> <pre><code>class Button(Component):\n    \"\"\"\n    Represent a Button, an interactive Component that can only be used in messages.\n\n    A Button creates clickable elements that users can interact with. Buttons must be placed\n    inside an Action Row or a Section's Accessory field.\n\n    https://discord.com/developers/docs/components/reference#button\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.BUTTON.\n\n        style (ButtonStyles): A Button Style.\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.BUTTON, frozen=True)\n    \"\"\"The value of ComponentTypes.BUTTON.\"\"\"\n\n    style: ButtonStyles = Field(...)\n    \"\"\"A Button Style.\"\"\"\n\n    def set_style(self: Self, style: ButtonStyles) -&gt; \"Button\":\n        \"\"\"\n        Set the style of the Button.\n\n        Arguments:\n            style (ButtonStyles): A style for the Button.\n\n        Returns:\n            self (Button): The modified Button instance.\n        \"\"\"\n        self.style = style\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.button.Button.style","title":"<code>style = Field(...)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A Button Style.</p>"},{"location":"component/#clyde.components.button.Button.type","title":"<code>type = Field(default=ComponentTypes.BUTTON, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.BUTTON.</p>"},{"location":"component/#clyde.components.button.Button.set_style","title":"<code>set_style(style)</code>","text":"<p>Set the style of the Button.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>ButtonStyles</code> <p>A style for the Button.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Button</code> <p>The modified Button instance.</p> Source code in <code>clyde/components/button.py</code> <pre><code>def set_style(self: Self, style: ButtonStyles) -&gt; \"Button\":\n    \"\"\"\n    Set the style of the Button.\n\n    Arguments:\n        style (ButtonStyles): A style for the Button.\n\n    Returns:\n        self (Button): The modified Button instance.\n    \"\"\"\n    self.style = style\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.button.ButtonStyles","title":"<code>ButtonStyles</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Define the available styles of a Button Component.</p> <p>https://discord.com/developers/docs/components/reference#button-button-styles</p> <p>Attributes:</p> Name Type Description <code>LINK</code> <code>int</code> <p>Navigates to a URL.</p> Source code in <code>clyde/components/button.py</code> <pre><code>class ButtonStyles(IntEnum):\n    \"\"\"\n    Define the available styles of a Button Component.\n\n    https://discord.com/developers/docs/components/reference#button-button-styles\n\n    Attributes:\n        LINK (int): Navigates to a URL.\n    \"\"\"\n\n    LINK = 5\n    \"\"\"Navigates to a URL.\"\"\"\n</code></pre>"},{"location":"component/#clyde.components.button.ButtonStyles.LINK","title":"<code>LINK = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Navigates to a URL.</p>"},{"location":"component/#clyde.components.button.LinkButton","title":"<code>LinkButton</code>","text":"<p>               Bases: <code>Button</code></p> <p>Represent a Button Component navigates to a URL.</p> <p>https://discord.com/developers/docs/components/reference#button</p> <p>Attributes:</p> Name Type Description <code>style</code> <code>ButtonStyles</code> <p>The value of ButtonStyles.LINK.</p> <code>label</code> <code>str</code> <p>Text that appears on the Button; max 80 characters.</p> <code>url</code> <code>str</code> <p>URL for link-style Buttons.</p> Source code in <code>clyde/components/button.py</code> <pre><code>class LinkButton(Button):\n    \"\"\"\n    Represent a Button Component navigates to a URL.\n\n    https://discord.com/developers/docs/components/reference#button\n\n    Attributes:\n        style (ButtonStyles): The value of ButtonStyles.LINK.\n\n        label (str): Text that appears on the Button; max 80 characters.\n\n        url (str): URL for link-style Buttons.\n    \"\"\"\n\n    style: ButtonStyles = Field(default=ButtonStyles.LINK, frozen=True)\n    \"\"\"The value of ButtonStyles.LINK.\"\"\"\n\n    label: str | None = Field(default=None, max_length=80)\n    \"\"\"Text that appears on the Button; max 80 characters.\"\"\"\n\n    url: str | None = Field(default=None)\n    \"\"\"URL for link-style Buttons.\"\"\"\n\n    def set_label(self: Self, label: str) -&gt; \"LinkButton\":\n        \"\"\"\n        Set the label of the Link Button.\n\n        Arguments:\n            label (str): Text that appears on the Button; max 80 characters.\n\n        Returns:\n            self (LinkButton): The modified Link Button instance.\n        \"\"\"\n        self.label = label\n\n        return self\n\n    def set_url(self: Self, url: str) -&gt; \"LinkButton\":\n        \"\"\"\n        Set the URL of the Link Button.\n\n        Arguments:\n            url (str): URL for the link-style Button.\n\n        Returns:\n            self (LinkButton): The modified Link Button instance.\n        \"\"\"\n        self.url = url\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str) -&gt; str:\n        \"\"\"\n        Validate the value of URL for a Link Button.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(url, [\"http\", \"https\"])\n</code></pre>"},{"location":"component/#clyde.components.button.LinkButton.label","title":"<code>label = Field(default=None, max_length=80)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Text that appears on the Button; max 80 characters.</p>"},{"location":"component/#clyde.components.button.LinkButton.style","title":"<code>style = Field(default=ButtonStyles.LINK, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ButtonStyles.LINK.</p>"},{"location":"component/#clyde.components.button.LinkButton.url","title":"<code>url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL for link-style Buttons.</p>"},{"location":"component/#clyde.components.button.LinkButton.set_label","title":"<code>set_label(label)</code>","text":"<p>Set the label of the Link Button.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Text that appears on the Button; max 80 characters.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>LinkButton</code> <p>The modified Link Button instance.</p> Source code in <code>clyde/components/button.py</code> <pre><code>def set_label(self: Self, label: str) -&gt; \"LinkButton\":\n    \"\"\"\n    Set the label of the Link Button.\n\n    Arguments:\n        label (str): Text that appears on the Button; max 80 characters.\n\n    Returns:\n        self (LinkButton): The modified Link Button instance.\n    \"\"\"\n    self.label = label\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.button.LinkButton.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Link Button.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL for the link-style Button.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>LinkButton</code> <p>The modified Link Button instance.</p> Source code in <code>clyde/components/button.py</code> <pre><code>def set_url(self: Self, url: str) -&gt; \"LinkButton\":\n    \"\"\"\n    Set the URL of the Link Button.\n\n    Arguments:\n        url (str): URL for the link-style Button.\n\n    Returns:\n        self (LinkButton): The modified Link Button instance.\n    \"\"\"\n    self.url = url\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.container.Container","title":"<code>Container</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Container type.</p> <p>A Container is a top-level layout Component. Containers are visually distinct from surrounding Components and have an optional customizable color bar.</p> <p>https://discord.com/developers/docs/components/reference#container</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.CONTAINER.</p> <code>components</code> <code>list[ContainerComponent]</code> <p>Components of the type Action Row, Text Display, Section, Media Gallery, Separator, or File.</p> <code>accent_color</code> <code>str | int | None</code> <p>Color for the accent on the Container.</p> <code>spoiler</code> <code>bool | None</code> <p>Whether the Container should be a spoiler (blurred).</p> Source code in <code>clyde/components/container.py</code> <pre><code>class Container(Component):\n    \"\"\"\n    Represent a Discord Component of the Container type.\n\n    A Container is a top-level layout Component. Containers are visually distinct from\n    surrounding Components and have an optional customizable color bar.\n\n    https://discord.com/developers/docs/components/reference#container\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.CONTAINER.\n\n        components (list[ContainerComponent]): Components of the type Action Row,\n            Text Display, Section, Media Gallery, Separator, or File.\n\n        accent_color (str | int | None): Color for the accent on the Container.\n\n        spoiler (bool | None): Whether the Container should be a spoiler (blurred).\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.CONTAINER, frozen=True)\n    \"\"\"The value of ComponentTypes.CONTAINER.\"\"\"\n\n    components: list[ContainerComponent] | None = Field(default=None)\n    \"\"\"Components of the type Action Row, Text Display, Section, Media Gallery, Separator, or File\"\"\"\n\n    accent_color: str | int | None = Field(default=None)\n    \"\"\"Color for the accent on the Container.\"\"\"\n\n    spoiler: bool | None = Field(default=None)\n    \"\"\"Whether the Container should be a spoiler (blurred).\"\"\"\n\n    def add_component(\n        self: Self, component: ContainerComponent | list[ContainerComponent]\n    ) -&gt; \"Container\":\n        \"\"\"\n        Add one or more Components to the Container.\n\n        Arguments:\n            component (ContainerComponent | list[ContainerComponent]): A Component or list\n                of Components to add to the Container. Components must be of the type\n                Action Row, Text Display, Section, Media Gallery, Separator, or File.\n\n        Returns:\n            self (Container): The modified Container instance.\n        \"\"\"\n        if not self.components:\n            self.components = []\n\n        if isinstance(component, list):\n            self.components.extend(component)\n        else:\n            self.components.append(component)\n\n        return self\n\n    def remove_component(\n        self: Self,\n        component: ContainerComponent | list[ContainerComponent] | int | None,\n    ) -&gt; \"Container\":\n        \"\"\"\n        Remove a Component from the Section instance.\n\n        Arguments:\n            component (ContainerComponent | list[ContainerComponent] | int | None): A Component,\n                list of Components, or an index to remove. If set to None, all Components\n                are removed.\n\n        Returns:\n            self (Container): The modified Container instance.\n        \"\"\"\n        if self.components:\n            if component:\n                if isinstance(component, list):\n                    for entry in component:\n                        self.components.remove(entry)\n                elif isinstance(component, int):\n                    self.components.pop(component)\n                else:\n                    self.components.remove(component)\n\n                # Do not retain an empty list\n                if len(self.components) == 0:\n                    self.components = None\n            else:\n                self.components = None\n\n        return self\n\n    def set_accent_color(self: Self, accent_color: str | int | None) -&gt; \"Container\":\n        \"\"\"\n        Set the color for the accent on the Container.\n\n        Arguments:\n            accent_color (str | int): A color, represented as a hexadecimal string\n                or an integer, for the accent on the Container. If set to None, the\n                accent_color is cleared.\n\n        Returns:\n            self (Container): The modified Container instance.\n        \"\"\"\n        self.accent_color = accent_color\n\n        return self\n\n    def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"Container\":\n        \"\"\"\n        Set whether the Container should be a spoiler (blurred).\n\n        Arguments:\n            spoiler (bool): True if the Container should be a spoiler (blurred). If set\n                to None, the spoiler value is cleared.\n\n        Returns:\n            self (Container): The modified Container instance.\n        \"\"\"\n        self.spoiler = spoiler\n\n        return self\n\n    @field_validator(\"accent_color\", mode=\"after\")\n    @classmethod\n    def _validate_accent_color(cls, accent_color: str | int) -&gt; str | int:\n        \"\"\"\n        Validate the value of accent_color for a Container.\n\n        Arguments:\n            accent_color (str | int): The value to validate.\n\n        Returns:\n            accent_color (int): The validated accent_color value.\n        \"\"\"\n        return Validation.validate_color(accent_color)\n</code></pre>"},{"location":"component/#clyde.components.container.Container.accent_color","title":"<code>accent_color = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Color for the accent on the Container.</p>"},{"location":"component/#clyde.components.container.Container.components","title":"<code>components = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Components of the type Action Row, Text Display, Section, Media Gallery, Separator, or File</p>"},{"location":"component/#clyde.components.container.Container.spoiler","title":"<code>spoiler = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the Container should be a spoiler (blurred).</p>"},{"location":"component/#clyde.components.container.Container.type","title":"<code>type = Field(default=ComponentTypes.CONTAINER, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.CONTAINER.</p>"},{"location":"component/#clyde.components.container.Container.add_component","title":"<code>add_component(component)</code>","text":"<p>Add one or more Components to the Container.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>ContainerComponent | list[ContainerComponent]</code> <p>A Component or list of Components to add to the Container. Components must be of the type Action Row, Text Display, Section, Media Gallery, Separator, or File.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Container</code> <p>The modified Container instance.</p> Source code in <code>clyde/components/container.py</code> <pre><code>def add_component(\n    self: Self, component: ContainerComponent | list[ContainerComponent]\n) -&gt; \"Container\":\n    \"\"\"\n    Add one or more Components to the Container.\n\n    Arguments:\n        component (ContainerComponent | list[ContainerComponent]): A Component or list\n            of Components to add to the Container. Components must be of the type\n            Action Row, Text Display, Section, Media Gallery, Separator, or File.\n\n    Returns:\n        self (Container): The modified Container instance.\n    \"\"\"\n    if not self.components:\n        self.components = []\n\n    if isinstance(component, list):\n        self.components.extend(component)\n    else:\n        self.components.append(component)\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.container.Container.remove_component","title":"<code>remove_component(component)</code>","text":"<p>Remove a Component from the Section instance.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>ContainerComponent | list[ContainerComponent] | int | None</code> <p>A Component, list of Components, or an index to remove. If set to None, all Components are removed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Container</code> <p>The modified Container instance.</p> Source code in <code>clyde/components/container.py</code> <pre><code>def remove_component(\n    self: Self,\n    component: ContainerComponent | list[ContainerComponent] | int | None,\n) -&gt; \"Container\":\n    \"\"\"\n    Remove a Component from the Section instance.\n\n    Arguments:\n        component (ContainerComponent | list[ContainerComponent] | int | None): A Component,\n            list of Components, or an index to remove. If set to None, all Components\n            are removed.\n\n    Returns:\n        self (Container): The modified Container instance.\n    \"\"\"\n    if self.components:\n        if component:\n            if isinstance(component, list):\n                for entry in component:\n                    self.components.remove(entry)\n            elif isinstance(component, int):\n                self.components.pop(component)\n            else:\n                self.components.remove(component)\n\n            # Do not retain an empty list\n            if len(self.components) == 0:\n                self.components = None\n        else:\n            self.components = None\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.container.Container.set_accent_color","title":"<code>set_accent_color(accent_color)</code>","text":"<p>Set the color for the accent on the Container.</p> <p>Parameters:</p> Name Type Description Default <code>accent_color</code> <code>str | int</code> <p>A color, represented as a hexadecimal string or an integer, for the accent on the Container. If set to None, the accent_color is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Container</code> <p>The modified Container instance.</p> Source code in <code>clyde/components/container.py</code> <pre><code>def set_accent_color(self: Self, accent_color: str | int | None) -&gt; \"Container\":\n    \"\"\"\n    Set the color for the accent on the Container.\n\n    Arguments:\n        accent_color (str | int): A color, represented as a hexadecimal string\n            or an integer, for the accent on the Container. If set to None, the\n            accent_color is cleared.\n\n    Returns:\n        self (Container): The modified Container instance.\n    \"\"\"\n    self.accent_color = accent_color\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.container.Container.set_spoiler","title":"<code>set_spoiler(spoiler)</code>","text":"<p>Set whether the Container should be a spoiler (blurred).</p> <p>Parameters:</p> Name Type Description Default <code>spoiler</code> <code>bool</code> <p>True if the Container should be a spoiler (blurred). If set to None, the spoiler value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Container</code> <p>The modified Container instance.</p> Source code in <code>clyde/components/container.py</code> <pre><code>def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"Container\":\n    \"\"\"\n    Set whether the Container should be a spoiler (blurred).\n\n    Arguments:\n        spoiler (bool): True if the Container should be a spoiler (blurred). If set\n            to None, the spoiler value is cleared.\n\n    Returns:\n        self (Container): The modified Container instance.\n    \"\"\"\n    self.spoiler = spoiler\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.file.File","title":"<code>File</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the File type.</p> <p>A File is a top-level Component that allows you to display an uploaded file as an attachment to the message and reference it in the Component. Each file Component can only display 1 attached file, but you can upload multiple files and add them to different file Components within your payload.</p> <p>https://discord.com/developers/docs/components/reference#file</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.FILE.</p> <code>file</code> <code>UnfurledMediaItem</code> <p>This Unfurled Media Item is unique in that it only supports attachment references using the attachment:// syntax. <code>spoiler</code> <code>bool | None</code> <p>Whether the media should be a spoiler (blurred).</p> Source code in <code>clyde/components/file.py</code> <pre><code>class File(Component):\n    \"\"\"\n    Represent a Discord Component of the File type.\n\n    A File is a top-level Component that allows you to display an uploaded file as an\n    attachment to the message and reference it in the Component. Each file Component\n    can only display 1 attached file, but you can upload multiple files and add them\n    to different file Components within your payload.\n\n    https://discord.com/developers/docs/components/reference#file\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.FILE.\n\n        file (UnfurledMediaItem): This Unfurled Media Item is unique in that it only\n            supports attachment references using the attachment://&lt;filename&gt; syntax.\n\n        spoiler (bool | None): Whether the media should be a spoiler (blurred).\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.FILE, frozen=True)\n    \"\"\"The value of ComponentTypes.FILE.\"\"\"\n\n    file: UnfurledMediaItem | None = Field(default=None)\n    \"\"\"\n    This Unfurled Media Item is unique in that it only supports attachment references\n    using the attachment://&lt;filename&gt; syntax.\n    \"\"\"\n\n    spoiler: bool | None = Field(default=None)\n    \"\"\"Whether the media should be a spoiler (blurred).\"\"\"\n\n    def set_file(self: Self, file: UnfurledMediaItem | str | None) -&gt; \"File\":\n        \"\"\"\n        Set the file for this component.\n\n        Arguments:\n            file (UnfurledMediaItem | str): This Unfurled Media Item is unique in that\n                it only supports attachment references using the attachment://&lt;filename&gt;\n                syntax. If set to None, the File value is cleared.\n\n        Returns:\n            self (File): The modified File instance.\n        \"\"\"\n        if isinstance(file, str):\n            file = UnfurledMediaItem(url=file)\n\n        self.file = file\n\n        return self\n\n    def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"File\":\n        \"\"\"\n        Set whether the File should be a spoiler (blurred).\n\n        Arguments:\n            spoiler (bool): True if the File should be a spoiler (blurred). If set to\n                None, the Spoiler value is cleared.\n\n        Returns:\n            self (File): The modified File instance.\n        \"\"\"\n        self.spoiler = spoiler\n\n        return self\n\n    @field_validator(\"file\", mode=\"after\")\n    @classmethod\n    def _validate_file(cls, file: UnfurledMediaItem) -&gt; UnfurledMediaItem:\n        \"\"\"\n        Validate the value of file for a File.\n\n        Arguments:\n            file (UnfurledMediaItem | str): The value to validate.\n\n        Returns:\n            file (UnfurledMediaItem): The validated file value.\n        \"\"\"\n        return UnfurledMediaItem(\n            url=Validation.validate_url_scheme(file.url, [\"attachment\"])\n        )\n</code></pre>"},{"location":"component/#clyde.components.file.File.file","title":"<code>file = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>This Unfurled Media Item is unique in that it only supports attachment references using the attachment:// syntax."},{"location":"component/#clyde.components.file.File.spoiler","title":"<code>spoiler = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the media should be a spoiler (blurred).</p>"},{"location":"component/#clyde.components.file.File.type","title":"<code>type = Field(default=ComponentTypes.FILE, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.FILE.</p>"},{"location":"component/#clyde.components.file.File.set_file","title":"<code>set_file(file)</code>","text":"<p>Set the file for this component.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>UnfurledMediaItem | str</code> <p>This Unfurled Media Item is unique in that it only supports attachment references using the attachment:// syntax. If set to None, the File value is cleared. required <p>Returns:</p> Name Type Description <code>self</code> <code>File</code> <p>The modified File instance.</p> Source code in <code>clyde/components/file.py</code> <pre><code>def set_file(self: Self, file: UnfurledMediaItem | str | None) -&gt; \"File\":\n    \"\"\"\n    Set the file for this component.\n\n    Arguments:\n        file (UnfurledMediaItem | str): This Unfurled Media Item is unique in that\n            it only supports attachment references using the attachment://&lt;filename&gt;\n            syntax. If set to None, the File value is cleared.\n\n    Returns:\n        self (File): The modified File instance.\n    \"\"\"\n    if isinstance(file, str):\n        file = UnfurledMediaItem(url=file)\n\n    self.file = file\n\n    return self\n</code></pre> <p>Define the Media Gallery class and its associates.</p> <p>Define the Section class and its associates.</p> <p>Define the Seperator class and its associates.</p> <p>Define the Text Display class and its associates.</p> <p>Define the Thumbnail class and its associates.</p> <p>Define the Unfurled Media Item class and its associates.</p>"},{"location":"component/#clyde.components.file.File.set_spoiler","title":"<code>set_spoiler(spoiler)</code>","text":"<p>Set whether the File should be a spoiler (blurred).</p> <p>Parameters:</p> Name Type Description Default <code>spoiler</code> <code>bool</code> <p>True if the File should be a spoiler (blurred). If set to None, the Spoiler value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>File</code> <p>The modified File instance.</p> Source code in <code>clyde/components/file.py</code> <pre><code>def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"File\":\n    \"\"\"\n    Set whether the File should be a spoiler (blurred).\n\n    Arguments:\n        spoiler (bool): True if the File should be a spoiler (blurred). If set to\n            None, the Spoiler value is cleared.\n\n    Returns:\n        self (File): The modified File instance.\n    \"\"\"\n    self.spoiler = spoiler\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGallery","title":"<code>MediaGallery</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Media Gallery type.</p> <p>A Media Gallery is a top-level content Component that allows you to display 1-10 media attachments in an organized gallery format. Each item can have optional descriptions and can be marked as spoilers.</p> <p>https://discord.com/developers/docs/components/reference#media-gallery</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.MEDIA_GALLERY.</p> <code>items</code> <code>list[MediaGalleryItem]</code> <p>1 to 10 Media Gallery Items.</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>class MediaGallery(Component):\n    \"\"\"\n    Represent a Discord Component of the Media Gallery type.\n\n    A Media Gallery is a top-level content Component that allows you to display 1-10 media\n    attachments in an organized gallery format. Each item can have optional descriptions\n    and can be marked as spoilers.\n\n    https://discord.com/developers/docs/components/reference#media-gallery\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.MEDIA_GALLERY.\n\n        items (list[MediaGalleryItem]): 1 to 10 Media Gallery Items.\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.MEDIA_GALLERY, frozen=True)\n    \"\"\"The value of ComponentTypes.MEDIA_GALLERY.\"\"\"\n\n    items: list[MediaGalleryItem] | None = Field(default=None, max_length=10)\n    \"\"\"1 to 10 Media Gallery Items.\"\"\"\n\n    def add_item(\n        self: Self, item: MediaGalleryItem | list[MediaGalleryItem]\n    ) -&gt; \"MediaGallery\":\n        \"\"\"\n        Add one or more Media Gallery Items to the Media Gallery.\n\n        Arguments:\n            item (MediaGalleryItem | list[MediaGalleryItem]): A Media Gallery Item or\n                list of Media Gallery Items to add to the Media Gallery.\n\n        Returns:\n            self (MediaGallery): The modified Media Gallery instance.\n        \"\"\"\n        if not self.items:\n            self.items = []\n\n        if isinstance(item, list):\n            self.items.extend(item)\n        else:\n            self.items.append(item)\n\n        return self\n\n    def remove_item(\n        self: Self, item: MediaGalleryItem | list[MediaGalleryItem] | int | None\n    ) -&gt; \"MediaGallery\":\n        \"\"\"\n        Remove a Media Gallery Item from the Media Gallery instance.\n\n        Arguments:\n            item (MediaGalleryItem | list[MediaGalleryItem] | int | None): A Media Gallery\n                Item, list of Media Gallery Items, or an index to remove. If set to None,\n                all items are removed.\n\n        Returns:\n            self (MediaGallery): The modified Media Gallery instance.\n        \"\"\"\n        if self.items:\n            if item:\n                if isinstance(item, list):\n                    for entry in item:\n                        self.items.remove(entry)\n                elif isinstance(item, int):\n                    self.items.pop(item)\n                else:\n                    self.items.remove(item)\n\n                # Do not retain an empty list\n                if len(self.items) == 0:\n                    self.items = None\n            else:\n                self.items = None\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGallery.items","title":"<code>items = Field(default=None, max_length=10)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>1 to 10 Media Gallery Items.</p>"},{"location":"component/#clyde.components.media_gallery.MediaGallery.type","title":"<code>type = Field(default=ComponentTypes.MEDIA_GALLERY, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.MEDIA_GALLERY.</p>"},{"location":"component/#clyde.components.media_gallery.MediaGallery.add_item","title":"<code>add_item(item)</code>","text":"<p>Add one or more Media Gallery Items to the Media Gallery.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>MediaGalleryItem | list[MediaGalleryItem]</code> <p>A Media Gallery Item or list of Media Gallery Items to add to the Media Gallery.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>MediaGallery</code> <p>The modified Media Gallery instance.</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>def add_item(\n    self: Self, item: MediaGalleryItem | list[MediaGalleryItem]\n) -&gt; \"MediaGallery\":\n    \"\"\"\n    Add one or more Media Gallery Items to the Media Gallery.\n\n    Arguments:\n        item (MediaGalleryItem | list[MediaGalleryItem]): A Media Gallery Item or\n            list of Media Gallery Items to add to the Media Gallery.\n\n    Returns:\n        self (MediaGallery): The modified Media Gallery instance.\n    \"\"\"\n    if not self.items:\n        self.items = []\n\n    if isinstance(item, list):\n        self.items.extend(item)\n    else:\n        self.items.append(item)\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGallery.remove_item","title":"<code>remove_item(item)</code>","text":"<p>Remove a Media Gallery Item from the Media Gallery instance.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>MediaGalleryItem | list[MediaGalleryItem] | int | None</code> <p>A Media Gallery Item, list of Media Gallery Items, or an index to remove. If set to None, all items are removed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>MediaGallery</code> <p>The modified Media Gallery instance.</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>def remove_item(\n    self: Self, item: MediaGalleryItem | list[MediaGalleryItem] | int | None\n) -&gt; \"MediaGallery\":\n    \"\"\"\n    Remove a Media Gallery Item from the Media Gallery instance.\n\n    Arguments:\n        item (MediaGalleryItem | list[MediaGalleryItem] | int | None): A Media Gallery\n            Item, list of Media Gallery Items, or an index to remove. If set to None,\n            all items are removed.\n\n    Returns:\n        self (MediaGallery): The modified Media Gallery instance.\n    \"\"\"\n    if self.items:\n        if item:\n            if isinstance(item, list):\n                for entry in item:\n                    self.items.remove(entry)\n            elif isinstance(item, int):\n                self.items.pop(item)\n            else:\n                self.items.remove(item)\n\n            # Do not retain an empty list\n            if len(self.items) == 0:\n                self.items = None\n        else:\n            self.items = None\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem","title":"<code>MediaGalleryItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Media Gallery Item to be used within a Media Gallery Component.</p> <p>https://discord.com/developers/docs/components/reference#media-gallery-media-gallery-item-structure</p> <p>Attributes:</p> Name Type Description <code>media</code> <code>UnfurledMediaItem</code> <p>A URL or attachment.</p> <code>description</code> <code>str | None</code> <p>Alt text for the media.</p> <code>spoiler</code> <code>bool | None</code> <p>Whether the media should be a spoiler (blurred).</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>class MediaGalleryItem(BaseModel):\n    \"\"\"\n    Represent a Media Gallery Item to be used within a Media Gallery Component.\n\n    https://discord.com/developers/docs/components/reference#media-gallery-media-gallery-item-structure\n\n    Attributes:\n        media (UnfurledMediaItem): A URL or attachment.\n\n        description (str | None): Alt text for the media.\n\n        spoiler (bool | None): Whether the media should be a spoiler (blurred).\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Media Gallery Item class.\"\"\"\n\n    media: UnfurledMediaItem | None = Field(default=None)\n    \"\"\"A URL or attachment.\"\"\"\n\n    description: str | None = Field(default=None)\n    \"\"\"Alt text for the media.\"\"\"\n\n    spoiler: bool | None = Field(default=None)\n    \"\"\"Whether the media should be a spoiler (blurred).\"\"\"\n\n    def set_media(self: Self, media: UnfurledMediaItem | str) -&gt; \"MediaGalleryItem\":\n        \"\"\"\n        Set the URL or attachment for the Media Gallery Item.\n\n        Arguments:\n            media (UnfurledMediaItem | str): A URL or attachment.\n\n        Returns:\n            self (MediaGalleryItem): The modified MediaGalleryItem instance.\n        \"\"\"\n        if isinstance(media, str):\n            media = UnfurledMediaItem(url=media)\n\n        self.media = media\n\n        return self\n\n    def set_description(\n        self: Self, description: str | None = None\n    ) -&gt; \"MediaGalleryItem\":\n        \"\"\"\n        Set the alt text for the Media Gallery Item.\n\n        Arguments:\n            description (str | None): The alt text to set for the Media Gallery Item.\n                If set to None, the alt text is cleared.\n\n        Returns:\n            self (MediaGalleryItem): The modified MediaGalleryItem instance.\n        \"\"\"\n        self.description = description\n\n        return self\n\n    def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"MediaGalleryItem\":\n        \"\"\"\n        Set whether the Media Gallery Item should be a spoiler (blurred).\n\n        Arguments:\n            spoiler (bool): True if the Media Gallery Item should be a spoiler (blurred).\n                If set to None, the value of spoiler is cleared.\n\n        Returns:\n            self (MediaGalleryItem): The modified MediaGalleryItem instance.\n        \"\"\"\n        self.spoiler = spoiler\n\n        return self\n\n    @field_validator(\"media\", mode=\"after\")\n    @classmethod\n    def _validate_media(cls, media: UnfurledMediaItem) -&gt; UnfurledMediaItem:\n        \"\"\"\n        Validate the value of media for a Media Gallery Item.\n\n        Arguments:\n            media (UnfurledMediaItem): The value to validate.\n\n        Returns:\n            media (UnfurledMediaItem): The validated media value.\n        \"\"\"\n        return UnfurledMediaItem(\n            url=Validation.validate_url_scheme(\n                media.url, [\"http\", \"https\", \"attachment\"]\n            )\n        )\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.description","title":"<code>description = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alt text for the media.</p>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.media","title":"<code>media = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A URL or attachment.</p>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Media Gallery Item class.</p>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.spoiler","title":"<code>spoiler = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the media should be a spoiler (blurred).</p>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.set_description","title":"<code>set_description(description=None)</code>","text":"<p>Set the alt text for the Media Gallery Item.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str | None</code> <p>The alt text to set for the Media Gallery Item. If set to None, the alt text is cleared.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>self</code> <code>MediaGalleryItem</code> <p>The modified MediaGalleryItem instance.</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>def set_description(\n    self: Self, description: str | None = None\n) -&gt; \"MediaGalleryItem\":\n    \"\"\"\n    Set the alt text for the Media Gallery Item.\n\n    Arguments:\n        description (str | None): The alt text to set for the Media Gallery Item.\n            If set to None, the alt text is cleared.\n\n    Returns:\n        self (MediaGalleryItem): The modified MediaGalleryItem instance.\n    \"\"\"\n    self.description = description\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.set_media","title":"<code>set_media(media)</code>","text":"<p>Set the URL or attachment for the Media Gallery Item.</p> <p>Parameters:</p> Name Type Description Default <code>media</code> <code>UnfurledMediaItem | str</code> <p>A URL or attachment.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>MediaGalleryItem</code> <p>The modified MediaGalleryItem instance.</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>def set_media(self: Self, media: UnfurledMediaItem | str) -&gt; \"MediaGalleryItem\":\n    \"\"\"\n    Set the URL or attachment for the Media Gallery Item.\n\n    Arguments:\n        media (UnfurledMediaItem | str): A URL or attachment.\n\n    Returns:\n        self (MediaGalleryItem): The modified MediaGalleryItem instance.\n    \"\"\"\n    if isinstance(media, str):\n        media = UnfurledMediaItem(url=media)\n\n    self.media = media\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.media_gallery.MediaGalleryItem.set_spoiler","title":"<code>set_spoiler(spoiler)</code>","text":"<p>Set whether the Media Gallery Item should be a spoiler (blurred).</p> <p>Parameters:</p> Name Type Description Default <code>spoiler</code> <code>bool</code> <p>True if the Media Gallery Item should be a spoiler (blurred). If set to None, the value of spoiler is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>MediaGalleryItem</code> <p>The modified MediaGalleryItem instance.</p> Source code in <code>clyde/components/media_gallery.py</code> <pre><code>def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"MediaGalleryItem\":\n    \"\"\"\n    Set whether the Media Gallery Item should be a spoiler (blurred).\n\n    Arguments:\n        spoiler (bool): True if the Media Gallery Item should be a spoiler (blurred).\n            If set to None, the value of spoiler is cleared.\n\n    Returns:\n        self (MediaGalleryItem): The modified MediaGalleryItem instance.\n    \"\"\"\n    self.spoiler = spoiler\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.section.Section","title":"<code>Section</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Section type.</p> <p>A Section is a top-level layout Component that allows you to join text contextually with an Accessory.</p> <p>https://discord.com/developers/docs/components/reference#section</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.SECTION.</p> <code>components</code> <code>list[TextDisplay]</code> <p>1-3 Text Display Components.</p> <code>accessory</code> <code>Thumbnail | LinkButton</code> <p>A Thumbnail or a Link Button Component.</p> Source code in <code>clyde/components/section.py</code> <pre><code>class Section(Component):\n    \"\"\"\n    Represent a Discord Component of the Section type.\n\n    A Section is a top-level layout Component that allows you to join text contextually\n    with an Accessory.\n\n    https://discord.com/developers/docs/components/reference#section\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.SECTION.\n\n        components (list[TextDisplay]): 1-3 Text Display Components.\n\n        accessory (Thumbnail | LinkButton): A Thumbnail or a Link Button Component.\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.SECTION, frozen=True)\n    \"\"\"The value of ComponentTypes.SECTION.\"\"\"\n\n    components: list[TextDisplay] | None = Field(default=None, max_length=3)\n    \"\"\"1-3 Text Display Components.\"\"\"\n\n    accessory: Thumbnail | LinkButton | None = Field(default=None)\n    \"\"\"A Thumbnail or a Link Button Component.\"\"\"\n\n    def add_component(\n        self: Self, component: TextDisplay | list[TextDisplay]\n    ) -&gt; \"Section\":\n        \"\"\"\n        Add one or more Text Display Components to the Section instance.\n\n        Arguments:\n            component (TextDisplay | list[TextDisplay]): A Text Display or list of\n                Text Displays to add to the Section.\n\n        Returns:\n            self (Section): The modified Section instance.\n        \"\"\"\n        if not self.components:\n            self.components = []\n\n        if isinstance(component, list):\n            self.components.extend(component)\n        else:\n            self.components.append(component)\n\n        return self\n\n    def remove_component(\n        self: Self, component: TextDisplay | list[TextDisplay] | int | None\n    ) -&gt; \"Section\":\n        \"\"\"\n        Remove a Component from the Section instance.\n\n        Arguments:\n            component (TextDisplay | list[TextDisplay] | int | None): A Component, list\n                of Components, or an index to remove. If set to None, all Components\n                are removed.\n\n        Returns:\n            self (Section): The modified Section instance.\n        \"\"\"\n        if self.components:\n            if component:\n                if isinstance(component, list):\n                    for entry in component:\n                        self.components.remove(entry)\n                elif isinstance(component, int):\n                    self.components.pop(component)\n                else:\n                    self.components.remove(component)\n\n                # Do not retain an empty list\n                if len(self.components) == 0:\n                    self.components = None\n            else:\n                self.components = None\n\n        return self\n\n    def set_accessory(\n        self: Self, accessory: Thumbnail | LinkButton | None\n    ) -&gt; \"Section\":\n        \"\"\"\n        Set the Accessory Component on the Section instance.\n\n        Arguments:\n            accessory (Thumbnail | LinkButton): A Thumbnail or Link Button Component to\n                set on the Section. If set to None, the Accessory value is cleared.\n\n        Returns:\n            self (Section): The modified Section instance.\n        \"\"\"\n        self.accessory = accessory\n\n        return self\n\n    def remove_accessory(self: Self) -&gt; \"Section\":\n        \"\"\"\n        Remove the Accessory Component from the Section instance.\n\n        Returns:\n            self (Section): The modified Section instance.\n        \"\"\"\n        self.accessory = None\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.section.Section.accessory","title":"<code>accessory = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A Thumbnail or a Link Button Component.</p>"},{"location":"component/#clyde.components.section.Section.components","title":"<code>components = Field(default=None, max_length=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>1-3 Text Display Components.</p>"},{"location":"component/#clyde.components.section.Section.type","title":"<code>type = Field(default=ComponentTypes.SECTION, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.SECTION.</p>"},{"location":"component/#clyde.components.section.Section.add_component","title":"<code>add_component(component)</code>","text":"<p>Add one or more Text Display Components to the Section instance.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>TextDisplay | list[TextDisplay]</code> <p>A Text Display or list of Text Displays to add to the Section.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Section</code> <p>The modified Section instance.</p> Source code in <code>clyde/components/section.py</code> <pre><code>def add_component(\n    self: Self, component: TextDisplay | list[TextDisplay]\n) -&gt; \"Section\":\n    \"\"\"\n    Add one or more Text Display Components to the Section instance.\n\n    Arguments:\n        component (TextDisplay | list[TextDisplay]): A Text Display or list of\n            Text Displays to add to the Section.\n\n    Returns:\n        self (Section): The modified Section instance.\n    \"\"\"\n    if not self.components:\n        self.components = []\n\n    if isinstance(component, list):\n        self.components.extend(component)\n    else:\n        self.components.append(component)\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.section.Section.remove_accessory","title":"<code>remove_accessory()</code>","text":"<p>Remove the Accessory Component from the Section instance.</p> <p>Returns:</p> Name Type Description <code>self</code> <code>Section</code> <p>The modified Section instance.</p> Source code in <code>clyde/components/section.py</code> <pre><code>def remove_accessory(self: Self) -&gt; \"Section\":\n    \"\"\"\n    Remove the Accessory Component from the Section instance.\n\n    Returns:\n        self (Section): The modified Section instance.\n    \"\"\"\n    self.accessory = None\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.section.Section.remove_component","title":"<code>remove_component(component)</code>","text":"<p>Remove a Component from the Section instance.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>TextDisplay | list[TextDisplay] | int | None</code> <p>A Component, list of Components, or an index to remove. If set to None, all Components are removed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Section</code> <p>The modified Section instance.</p> Source code in <code>clyde/components/section.py</code> <pre><code>def remove_component(\n    self: Self, component: TextDisplay | list[TextDisplay] | int | None\n) -&gt; \"Section\":\n    \"\"\"\n    Remove a Component from the Section instance.\n\n    Arguments:\n        component (TextDisplay | list[TextDisplay] | int | None): A Component, list\n            of Components, or an index to remove. If set to None, all Components\n            are removed.\n\n    Returns:\n        self (Section): The modified Section instance.\n    \"\"\"\n    if self.components:\n        if component:\n            if isinstance(component, list):\n                for entry in component:\n                    self.components.remove(entry)\n            elif isinstance(component, int):\n                self.components.pop(component)\n            else:\n                self.components.remove(component)\n\n            # Do not retain an empty list\n            if len(self.components) == 0:\n                self.components = None\n        else:\n            self.components = None\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.section.Section.set_accessory","title":"<code>set_accessory(accessory)</code>","text":"<p>Set the Accessory Component on the Section instance.</p> <p>Parameters:</p> Name Type Description Default <code>accessory</code> <code>Thumbnail | LinkButton</code> <p>A Thumbnail or Link Button Component to set on the Section. If set to None, the Accessory value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Section</code> <p>The modified Section instance.</p> Source code in <code>clyde/components/section.py</code> <pre><code>def set_accessory(\n    self: Self, accessory: Thumbnail | LinkButton | None\n) -&gt; \"Section\":\n    \"\"\"\n    Set the Accessory Component on the Section instance.\n\n    Arguments:\n        accessory (Thumbnail | LinkButton): A Thumbnail or Link Button Component to\n            set on the Section. If set to None, the Accessory value is cleared.\n\n    Returns:\n        self (Section): The modified Section instance.\n    \"\"\"\n    self.accessory = accessory\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.seperator.Seperator","title":"<code>Seperator</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Seperator type.</p> <p>A Separator is a top-level layout Component that adds vertical padding and visual division between other Components.</p> <p>https://discord.com/developers/docs/components/reference#separator</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.SEPERATOR.</p> <code>divider</code> <code>bool | None</code> <p>Whether a visual divider should be displayed in the Component.</p> <code>spacing</code> <code>SeperatorSpacing | None</code> <p>Size of Separator padding.</p> Source code in <code>clyde/components/seperator.py</code> <pre><code>class Seperator(Component):\n    \"\"\"\n    Represent a Discord Component of the Seperator type.\n\n    A Separator is a top-level layout Component that adds vertical padding and visual\n    division between other Components.\n\n    https://discord.com/developers/docs/components/reference#separator\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.SEPERATOR.\n\n        divider (bool | None): Whether a visual divider should be displayed in the Component.\n\n        spacing (SeperatorSpacing | None): Size of Separator padding.\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.SEPERATOR, frozen=True)\n    \"\"\"The value of ComponentTypes.SEPERATOR.\"\"\"\n\n    divider: bool | None = Field(default=None)\n    \"\"\"Whether a visual divider should be displayed in the Component.\"\"\"\n\n    spacing: SeperatorSpacing | None = Field(default=None)\n    \"\"\"Size of Separator padding.\"\"\"\n\n    def set_divider(self: Self, divider: bool | None) -&gt; \"Seperator\":\n        \"\"\"\n        Set whether a visual divider should be displayed in the Component.\n\n        Arguments:\n            divider (bool): True if a visual divider should be displayed in the Component.\n                If set to None, the divider value is cleared.\n\n        Returns:\n            self (Seperator): The modified Seperator instance.\n        \"\"\"\n        self.divider = divider\n\n        return self\n\n    def set_spacing(self: Self, spacing: SeperatorSpacing | None) -&gt; \"Seperator\":\n        \"\"\"\n        Set the size of the padding on the Seperator.\n\n        Arguments:\n            spacing (SeperatorSpacing): The size of the padding on the Seperator. If set\n                to None, the spacing value is cleared.\n\n        Returns:\n            self (Seperator): The modified Seperator instance.\n        \"\"\"\n        self.spacing = spacing\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.seperator.Seperator.divider","title":"<code>divider = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether a visual divider should be displayed in the Component.</p>"},{"location":"component/#clyde.components.seperator.Seperator.spacing","title":"<code>spacing = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Size of Separator padding.</p>"},{"location":"component/#clyde.components.seperator.Seperator.type","title":"<code>type = Field(default=ComponentTypes.SEPERATOR, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.SEPERATOR.</p>"},{"location":"component/#clyde.components.seperator.Seperator.set_divider","title":"<code>set_divider(divider)</code>","text":"<p>Set whether a visual divider should be displayed in the Component.</p> <p>Parameters:</p> Name Type Description Default <code>divider</code> <code>bool</code> <p>True if a visual divider should be displayed in the Component. If set to None, the divider value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Seperator</code> <p>The modified Seperator instance.</p> Source code in <code>clyde/components/seperator.py</code> <pre><code>def set_divider(self: Self, divider: bool | None) -&gt; \"Seperator\":\n    \"\"\"\n    Set whether a visual divider should be displayed in the Component.\n\n    Arguments:\n        divider (bool): True if a visual divider should be displayed in the Component.\n            If set to None, the divider value is cleared.\n\n    Returns:\n        self (Seperator): The modified Seperator instance.\n    \"\"\"\n    self.divider = divider\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.seperator.Seperator.set_spacing","title":"<code>set_spacing(spacing)</code>","text":"<p>Set the size of the padding on the Seperator.</p> <p>Parameters:</p> Name Type Description Default <code>spacing</code> <code>SeperatorSpacing</code> <p>The size of the padding on the Seperator. If set to None, the spacing value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Seperator</code> <p>The modified Seperator instance.</p> Source code in <code>clyde/components/seperator.py</code> <pre><code>def set_spacing(self: Self, spacing: SeperatorSpacing | None) -&gt; \"Seperator\":\n    \"\"\"\n    Set the size of the padding on the Seperator.\n\n    Arguments:\n        spacing (SeperatorSpacing): The size of the padding on the Seperator. If set\n            to None, the spacing value is cleared.\n\n    Returns:\n        self (Seperator): The modified Seperator instance.\n    \"\"\"\n    self.spacing = spacing\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.seperator.SeperatorSpacing","title":"<code>SeperatorSpacing</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>An enumeration representing the size of the Separator's padding.</p> <p>The SeperatorSpacing enum defines two possible values for the padding size: SMALL (1) and LARGE (2).</p> <p>Attributes:</p> Name Type Description <code>SMALL</code> <code>int</code> <p>The smaller padding size.</p> <code>LARGE</code> <code>int</code> <p>The larger padding size.</p> Source code in <code>clyde/components/seperator.py</code> <pre><code>class SeperatorSpacing(IntEnum):\n    \"\"\"\n    An enumeration representing the size of the Separator's padding.\n\n    The SeperatorSpacing enum defines two possible values for the padding size:\n    SMALL (1) and LARGE (2).\n\n    Attributes:\n        SMALL (int): The smaller padding size.\n\n        LARGE (int): The larger padding size.\n    \"\"\"\n\n    SMALL = 1\n    \"\"\"Small padding.\"\"\"\n\n    LARGE = 2\n    \"\"\"Large padding.\"\"\"\n</code></pre>"},{"location":"component/#clyde.components.seperator.SeperatorSpacing.LARGE","title":"<code>LARGE = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Large padding.</p>"},{"location":"component/#clyde.components.seperator.SeperatorSpacing.SMALL","title":"<code>SMALL = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Small padding.</p>"},{"location":"component/#clyde.components.text_display.TextDisplay","title":"<code>TextDisplay</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Text Display type.</p> <p>A Text Display is a top-level content Component that allows you to add text to your message formatted with markdown and mention users and roles. This is similar to the content field of a message, but allows you to add multiple text Components, controlling the layout of your message.</p> <p>https://discord.com/developers/docs/components/reference#text-display</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.TEXT_DISPLAY.</p> <code>content</code> <code>str</code> <p>Text that will be displayed similar to a message.</p> Source code in <code>clyde/components/text_display.py</code> <pre><code>class TextDisplay(Component):\n    \"\"\"\n    Represent a Discord Component of the Text Display type.\n\n    A Text Display is a top-level content Component that allows you to add text to your\n    message formatted with markdown and mention users and roles. This is similar to the\n    content field of a message, but allows you to add multiple text Components, controlling\n    the layout of your message.\n\n    https://discord.com/developers/docs/components/reference#text-display\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.TEXT_DISPLAY.\n\n        content (str): Text that will be displayed similar to a message.\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.TEXT_DISPLAY, frozen=True)\n    \"\"\"The value of ComponentTypes.TEXT_DISPLAY.\"\"\"\n\n    content: str | None = Field(default=None)\n    \"\"\"Text that will be displayed similar to a message.\"\"\"\n\n    def set_content(self: Self, content: str) -&gt; \"TextDisplay\":\n        \"\"\"\n        Set the text that will be displayed on the Text Display.\n\n        Arguments:\n            content (str): The text that will be displayed similar to a message.\n\n        Returns:\n            self (TextDisplay): The modified Text Display instance.\n        \"\"\"\n        self.content = content\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.text_display.TextDisplay.content","title":"<code>content = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Text that will be displayed similar to a message.</p>"},{"location":"component/#clyde.components.text_display.TextDisplay.type","title":"<code>type = Field(default=ComponentTypes.TEXT_DISPLAY, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.TEXT_DISPLAY.</p>"},{"location":"component/#clyde.components.text_display.TextDisplay.set_content","title":"<code>set_content(content)</code>","text":"<p>Set the text that will be displayed on the Text Display.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The text that will be displayed similar to a message.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>TextDisplay</code> <p>The modified Text Display instance.</p> Source code in <code>clyde/components/text_display.py</code> <pre><code>def set_content(self: Self, content: str) -&gt; \"TextDisplay\":\n    \"\"\"\n    Set the text that will be displayed on the Text Display.\n\n    Arguments:\n        content (str): The text that will be displayed similar to a message.\n\n    Returns:\n        self (TextDisplay): The modified Text Display instance.\n    \"\"\"\n    self.content = content\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.thumbnail.Thumbnail","title":"<code>Thumbnail</code>","text":"<p>               Bases: <code>Component</code></p> <p>Represent a Discord Component of the Thumbnail type.</p> <p>A Thumbnail is a content Component that is a small image only usable as an Accessory in a Section. The preview comes from an Unfurled Media Item.</p> <p>https://discord.com/developers/docs/components/reference#thumbnail</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>ComponentTypes</code> <p>The value of ComponentTypes.THUMBNAIL.</p> <code>media</code> <code>UnfurledMediaItem</code> <p>A URL or attachment.</p> <code>description</code> <code>str | None</code> <p>Alt text for the media.</p> <code>spoiler</code> <code>bool | None</code> <p>Whether the Thumbnail should be a spoiler (blurred).</p> Source code in <code>clyde/components/thumbnail.py</code> <pre><code>class Thumbnail(Component):\n    \"\"\"\n    Represent a Discord Component of the Thumbnail type.\n\n    A Thumbnail is a content Component that is a small image only usable as an Accessory\n    in a Section. The preview comes from an Unfurled Media Item.\n\n    https://discord.com/developers/docs/components/reference#thumbnail\n\n    Attributes:\n        type (ComponentTypes): The value of ComponentTypes.THUMBNAIL.\n\n        media (UnfurledMediaItem): A URL or attachment.\n\n        description (str | None): Alt text for the media.\n\n        spoiler (bool | None): Whether the Thumbnail should be a spoiler (blurred).\n    \"\"\"\n\n    type: ComponentTypes = Field(default=ComponentTypes.THUMBNAIL, frozen=True)\n    \"\"\"The value of ComponentTypes.THUMBNAIL.\"\"\"\n\n    media: UnfurledMediaItem | None = Field(default=None)\n    \"\"\"A URL or attachment.\"\"\"\n\n    description: str | None = Field(default=None)\n    \"\"\"Alt text for the media.\"\"\"\n\n    spoiler: bool | None = Field(default=None)\n    \"\"\"Whether the Thumbnail should be a spoiler (blurred).\"\"\"\n\n    def set_media(self: Self, media: UnfurledMediaItem | str) -&gt; \"Thumbnail\":\n        \"\"\"\n        Set the URL or attachment for the Thumbnail.\n\n        Arguments:\n            media (UnfurledMediaItem | str): A URL or attachment.\n\n        Returns:\n            self (Thumbnail): The modified Thumbnail instance.\n        \"\"\"\n        if isinstance(media, str):\n            media = UnfurledMediaItem(url=media)\n\n        self.media = media\n\n        return self\n\n    def set_description(self: Self, description: str | None) -&gt; \"Thumbnail\":\n        \"\"\"\n        Set the alt text for the Thumbnail.\n\n        Arguments:\n            description (str | None): The alt text to set for the Thumbnail. If set to\n                None, the alt text is cleared.\n\n        Returns:\n            self (Thumbnail): The modified Thumbnail instance.\n        \"\"\"\n        self.description = description\n\n        return self\n\n    def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"Thumbnail\":\n        \"\"\"\n        Set whether the Thumbnail should be a spoiler (blurred).\n\n        Arguments:\n            spoiler (bool): True if the Thumbnail should be a spoiler (blurred). If set\n                to None, the spoiler value is cleared.\n\n        Returns:\n            self (Thumbnail): The modified Thumbnail instance.\n        \"\"\"\n        self.spoiler = spoiler\n\n        return self\n</code></pre>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.description","title":"<code>description = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alt text for the media.</p>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.media","title":"<code>media = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A URL or attachment.</p>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.spoiler","title":"<code>spoiler = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the Thumbnail should be a spoiler (blurred).</p>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.type","title":"<code>type = Field(default=ComponentTypes.THUMBNAIL, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of ComponentTypes.THUMBNAIL.</p>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.set_description","title":"<code>set_description(description)</code>","text":"<p>Set the alt text for the Thumbnail.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str | None</code> <p>The alt text to set for the Thumbnail. If set to None, the alt text is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Thumbnail</code> <p>The modified Thumbnail instance.</p> Source code in <code>clyde/components/thumbnail.py</code> <pre><code>def set_description(self: Self, description: str | None) -&gt; \"Thumbnail\":\n    \"\"\"\n    Set the alt text for the Thumbnail.\n\n    Arguments:\n        description (str | None): The alt text to set for the Thumbnail. If set to\n            None, the alt text is cleared.\n\n    Returns:\n        self (Thumbnail): The modified Thumbnail instance.\n    \"\"\"\n    self.description = description\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.set_media","title":"<code>set_media(media)</code>","text":"<p>Set the URL or attachment for the Thumbnail.</p> <p>Parameters:</p> Name Type Description Default <code>media</code> <code>UnfurledMediaItem | str</code> <p>A URL or attachment.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Thumbnail</code> <p>The modified Thumbnail instance.</p> Source code in <code>clyde/components/thumbnail.py</code> <pre><code>def set_media(self: Self, media: UnfurledMediaItem | str) -&gt; \"Thumbnail\":\n    \"\"\"\n    Set the URL or attachment for the Thumbnail.\n\n    Arguments:\n        media (UnfurledMediaItem | str): A URL or attachment.\n\n    Returns:\n        self (Thumbnail): The modified Thumbnail instance.\n    \"\"\"\n    if isinstance(media, str):\n        media = UnfurledMediaItem(url=media)\n\n    self.media = media\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.thumbnail.Thumbnail.set_spoiler","title":"<code>set_spoiler(spoiler)</code>","text":"<p>Set whether the Thumbnail should be a spoiler (blurred).</p> <p>Parameters:</p> Name Type Description Default <code>spoiler</code> <code>bool</code> <p>True if the Thumbnail should be a spoiler (blurred). If set to None, the spoiler value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Thumbnail</code> <p>The modified Thumbnail instance.</p> Source code in <code>clyde/components/thumbnail.py</code> <pre><code>def set_spoiler(self: Self, spoiler: bool | None) -&gt; \"Thumbnail\":\n    \"\"\"\n    Set whether the Thumbnail should be a spoiler (blurred).\n\n    Arguments:\n        spoiler (bool): True if the Thumbnail should be a spoiler (blurred). If set\n            to None, the spoiler value is cleared.\n\n    Returns:\n        self (Thumbnail): The modified Thumbnail instance.\n    \"\"\"\n    self.spoiler = spoiler\n\n    return self\n</code></pre>"},{"location":"component/#clyde.components.unfurled_media_item.UnfurledMediaItem","title":"<code>UnfurledMediaItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent an Unfurled Media Item structure.</p> <p>https://discord.com/developers/docs/components/reference#unfurled-media-item-structure</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>Supports arbitrary URLs and attachment:// references. Source code in <code>clyde/components/unfurled_media_item.py</code> <pre><code>class UnfurledMediaItem(BaseModel):\n    \"\"\"\n    Represent an Unfurled Media Item structure.\n\n    https://discord.com/developers/docs/components/reference#unfurled-media-item-structure\n\n    Attributes:\n        url (str): Supports arbitrary URLs and attachment://&lt;filename&gt; references.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Unfurled Media Item class.\"\"\"\n\n    url: str | None = Field(default=None)\n    \"\"\"Supports arbitrary URLs and attachment://&lt;filename&gt; references.\"\"\"\n\n    def set_url(self: Self, url: str) -&gt; \"UnfurledMediaItem\":\n        \"\"\"\n        Set the URL of the Unfurled Media Item.\n\n        Arguments:\n            url (str): Supports arbitrary URLs and attachment://&lt;filename&gt; references.\n\n        Returns:\n            self (UnfurledMediaItem): The modified Unfurled Media Item instance.\n        \"\"\"\n        self.url = url\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str) -&gt; str:\n        \"\"\"\n        Validate the value of URL for an Unfurled Media Item.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(url, [\"http\", \"https\", \"attachment\"])\n</code></pre>"},{"location":"component/#clyde.components.unfurled_media_item.UnfurledMediaItem.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Unfurled Media Item class.</p>"},{"location":"component/#clyde.components.unfurled_media_item.UnfurledMediaItem.url","title":"<code>url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Supports arbitrary URLs and attachment:// references."},{"location":"component/#clyde.components.unfurled_media_item.UnfurledMediaItem.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Unfurled Media Item.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Supports arbitrary URLs and attachment:// references. required <p>Returns:</p> Name Type Description <code>self</code> <code>UnfurledMediaItem</code> <p>The modified Unfurled Media Item instance.</p> Source code in <code>clyde/components/unfurled_media_item.py</code> <pre><code>def set_url(self: Self, url: str) -&gt; \"UnfurledMediaItem\":\n    \"\"\"\n    Set the URL of the Unfurled Media Item.\n\n    Arguments:\n        url (str): Supports arbitrary URLs and attachment://&lt;filename&gt; references.\n\n    Returns:\n        self (UnfurledMediaItem): The modified Unfurled Media Item instance.\n    \"\"\"\n    self.url = url\n\n    return self\n</code></pre>"},{"location":"embed/","title":"Embed","text":"<p>Define the Embed class and its associates.</p>"},{"location":"embed/#clyde.embed.Embed","title":"<code>Embed</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Discord Embed of the Rich type.</p> <p>https://discord.com/developers/docs/resources/message#embed-object</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str | None</code> <p>Title of Embed.</p> <code>type</code> <code>EmbedTypes</code> <p>The value of EmbedTypes.RICH.</p> <code>description</code> <code>str | None</code> <p>Description of Embed.</p> <code>url</code> <code>str | None</code> <p>URL of Embed.</p> <code>timestamp</code> <code>str | int | float | datetime | None</code> <p>Timestamp of Embed content.</p> <code>color</code> <code>str | int | None</code> <p>Color code of the Embed.</p> <code>footer</code> <code>EmbedFooter | None</code> <p>Footer information.</p> <code>image</code> <code>EmbedImage | None</code> <p>Image information.</p> <code>thumbnail</code> <code>EmbedThumbnail | None</code> <p>Thumbnail information.</p> <code>author</code> <code>EmbedAuthor | None</code> <p>Author information.</p> <code>fields</code> <code>list[EmbedField] | None</code> <p>Fields information, max of 25.</p> Source code in <code>clyde/embed.py</code> <pre><code>class Embed(BaseModel):\n    \"\"\"\n    Represent a Discord Embed of the Rich type.\n\n    https://discord.com/developers/docs/resources/message#embed-object\n\n    Attributes:\n        title (str | None): Title of Embed.\n\n        type (EmbedTypes): The value of EmbedTypes.RICH.\n\n        description (str | None): Description of Embed.\n\n        url (str | None): URL of Embed.\n\n        timestamp (str | int | float | datetime | None): Timestamp of Embed content.\n\n        color (str | int | None): Color code of the Embed.\n\n        footer (EmbedFooter | None): Footer information.\n\n        image (EmbedImage | None): Image information.\n\n        thumbnail (EmbedThumbnail | None): Thumbnail information.\n\n        author (EmbedAuthor | None): Author information.\n\n        fields (list[EmbedField] | None): Fields information, max of 25.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Embed class.\"\"\"\n\n    title: str | None = Field(default=None, max_length=256)\n    \"\"\"Title of Embed.\"\"\"\n\n    type: EmbedTypes = Field(default=EmbedTypes.RICH, frozen=True)\n    \"\"\"The value of EmbedTypes.RICH.\"\"\"\n\n    description: str | None = Field(default=None, max_length=4096)\n    \"\"\"Description of Embed.\"\"\"\n\n    url: str | None = Field(default=None)\n    \"\"\"URL of Embed.\"\"\"\n\n    timestamp: int | float | str | datetime | None = Field(default=None)\n    \"\"\"Timestamp of Embed content.\"\"\"\n\n    color: str | int | None = Field(default=None)\n    \"\"\"Color code of the Embed.\"\"\"\n\n    footer: EmbedFooter | None = Field(default=None)\n    \"\"\"Footer information.\"\"\"\n\n    image: EmbedImage | None = Field(default=None)\n    \"\"\"Image information.\"\"\"\n\n    thumbnail: EmbedThumbnail | None = Field(default=None)\n    \"\"\"Thumbnail information.\"\"\"\n\n    author: EmbedAuthor | None = Field(default=None)\n    \"\"\"Author information.\"\"\"\n\n    fields: list[EmbedField] | None = Field(default=None, max_length=25)\n    \"\"\"Fields information, max of 25.\"\"\"\n\n    def set_title(self: Self, title: str | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the title of the Embed.\n\n        Arguments:\n            title (str | None): Title of Embed. If set to None, the title is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.title = title\n\n        return self\n\n    def set_description(self: Self, description: str | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the description of the Embed.\n\n        Arguments:\n            description (str | None): Description of Embed. If set to None, the description\n                is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.description = description\n\n        return self\n\n    def set_url(self: Self, url: str | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the URL of the Embed.\n\n        Arguments:\n            url (str | None): URL of Embed. If set to None, the URL is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.url = url\n\n        return self\n\n    def set_timestamp(\n        self: Self, timestamp: int | float | str | datetime | None\n    ) -&gt; \"Embed\":\n        \"\"\"\n        Set the timestamp of the Embed content.\n\n        Arguments:\n            timestamp (str | int | float | datetime | None): Timestamp of Embed content.\n                If set to None, the timestamp is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.timestamp = timestamp\n\n        return self\n\n    def set_color(self: Self, color: str | int | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the color code of the Embed.\n\n        Arguments:\n            color (str | int | None): Color code of the Embed. If set to None, the color\n                is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.color = color\n\n        return self\n\n    def set_footer(self: Self, footer: EmbedFooter | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the footer information of the Embed.\n\n        Arguments:\n            footer (EmbedFooter | None): Footer information. If set to None, the footer\n                is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.footer = footer\n\n        return self\n\n    def add_image(self: Self, image: EmbedImage | None) -&gt; \"Embed\":\n        \"\"\"\n        Add an image to the Embed.\n\n        Arguments:\n            image (EmbedImage | None): Image information. If set to None, the image is\n                cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.image = image\n\n        return self\n\n    def set_thumbnail(self: Self, thumbnail: EmbedThumbnail | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the thumbnail information of the Embed.\n\n        Arguments:\n            thumbnail (EmbedThumbnail | None): Thumbnail information. If set to None,\n                the thumbnail is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.thumbnail = thumbnail\n\n        return self\n\n    def set_author(self: Self, author: EmbedAuthor | None) -&gt; \"Embed\":\n        \"\"\"\n        Set the author information of the Embed.\n\n        Arguments:\n            author (EmbedAuthor | None): Author information. If set to None, the author\n                is cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        self.author = author\n\n        return self\n\n    def add_field(self: Self, field: EmbedField | list[EmbedField]) -&gt; \"Embed\":\n        \"\"\"\n        Add one or more fields to the Embed.\n\n        Arguments:\n            field (EmbedField | list[EmbedField]): A field or list of fields to add to\n                the Embed.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        if not self.fields:\n            self.fields = []\n\n        if isinstance(field, EmbedField):\n            self.fields.append(field)\n        else:\n            self.fields.extend(field)\n\n        return self\n\n    def remove_field(\n        self: Self, field: EmbedField | list[EmbedField] | int | None\n    ) -&gt; \"Embed\":\n        \"\"\"\n        Remove one or more fields from the Embed.\n\n        Arguments:\n            field (EmbedField | list[EmbedField] | int | None): An Embed Field, list of\n                Embed Fields, or an index to remove. If set to None, the fields value is\n                cleared.\n\n        Returns:\n            self (Embed): The modified Embed instance.\n        \"\"\"\n        if self.fields:\n            if field:\n                if isinstance(field, list):\n                    for entry in field:\n                        self.fields.remove(entry)\n                elif isinstance(field, int):\n                    self.fields.pop(field)\n                else:\n                    self.fields.remove(field)\n\n                # Do not retain an empty list\n                if len(self.fields) == 0:\n                    self.fields = None\n            else:\n                self.fields = None\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str) -&gt; str | int:\n        \"\"\"\n        Validate the value of color for an Embed.\n\n        Arguments:\n            color (str | int): The value to validate.\n\n        Returns:\n            color (int): The validated color value.\n        \"\"\"\n        return Validation.validate_url_scheme(url, [\"http\", \"https\"])\n\n    @field_validator(\"timestamp\", mode=\"after\")\n    @classmethod\n    def _validate_timestamp(cls, timestamp: int | float | str | datetime) -&gt; str | int:\n        \"\"\"\n        Validate the value of timestamp for an Embed.\n\n        Arguments:\n            color (str | int): The value to validate.\n\n        Returns:\n            color (int): The validated color value.\n        \"\"\"\n        return Validation.validate_timestamp(timestamp)\n\n    @field_validator(\"color\", mode=\"after\")\n    @classmethod\n    def _validate_color(cls, color: str | int) -&gt; str | int:\n        \"\"\"\n        Validate the value of color for an Embed.\n\n        Arguments:\n            color (str | int): The value to validate.\n\n        Returns:\n            color (int): The validated color value.\n        \"\"\"\n        return Validation.validate_color(color)\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.author","title":"<code>author = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Author information.</p>"},{"location":"embed/#clyde.embed.Embed.color","title":"<code>color = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Color code of the Embed.</p>"},{"location":"embed/#clyde.embed.Embed.description","title":"<code>description = Field(default=None, max_length=4096)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Description of Embed.</p>"},{"location":"embed/#clyde.embed.Embed.fields","title":"<code>fields = Field(default=None, max_length=25)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Fields information, max of 25.</p>"},{"location":"embed/#clyde.embed.Embed.footer","title":"<code>footer = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Footer information.</p>"},{"location":"embed/#clyde.embed.Embed.image","title":"<code>image = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Image information.</p>"},{"location":"embed/#clyde.embed.Embed.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Embed class.</p>"},{"location":"embed/#clyde.embed.Embed.thumbnail","title":"<code>thumbnail = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Thumbnail information.</p>"},{"location":"embed/#clyde.embed.Embed.timestamp","title":"<code>timestamp = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timestamp of Embed content.</p>"},{"location":"embed/#clyde.embed.Embed.title","title":"<code>title = Field(default=None, max_length=256)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Title of Embed.</p>"},{"location":"embed/#clyde.embed.Embed.type","title":"<code>type = Field(default=EmbedTypes.RICH, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of EmbedTypes.RICH.</p>"},{"location":"embed/#clyde.embed.Embed.url","title":"<code>url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL of Embed.</p>"},{"location":"embed/#clyde.embed.Embed.add_field","title":"<code>add_field(field)</code>","text":"<p>Add one or more fields to the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>EmbedField | list[EmbedField]</code> <p>A field or list of fields to add to the Embed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def add_field(self: Self, field: EmbedField | list[EmbedField]) -&gt; \"Embed\":\n    \"\"\"\n    Add one or more fields to the Embed.\n\n    Arguments:\n        field (EmbedField | list[EmbedField]): A field or list of fields to add to\n            the Embed.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    if not self.fields:\n        self.fields = []\n\n    if isinstance(field, EmbedField):\n        self.fields.append(field)\n    else:\n        self.fields.extend(field)\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.add_image","title":"<code>add_image(image)</code>","text":"<p>Add an image to the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>EmbedImage | None</code> <p>Image information. If set to None, the image is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def add_image(self: Self, image: EmbedImage | None) -&gt; \"Embed\":\n    \"\"\"\n    Add an image to the Embed.\n\n    Arguments:\n        image (EmbedImage | None): Image information. If set to None, the image is\n            cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.image = image\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.remove_field","title":"<code>remove_field(field)</code>","text":"<p>Remove one or more fields from the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>EmbedField | list[EmbedField] | int | None</code> <p>An Embed Field, list of Embed Fields, or an index to remove. If set to None, the fields value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def remove_field(\n    self: Self, field: EmbedField | list[EmbedField] | int | None\n) -&gt; \"Embed\":\n    \"\"\"\n    Remove one or more fields from the Embed.\n\n    Arguments:\n        field (EmbedField | list[EmbedField] | int | None): An Embed Field, list of\n            Embed Fields, or an index to remove. If set to None, the fields value is\n            cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    if self.fields:\n        if field:\n            if isinstance(field, list):\n                for entry in field:\n                    self.fields.remove(entry)\n            elif isinstance(field, int):\n                self.fields.pop(field)\n            else:\n                self.fields.remove(field)\n\n            # Do not retain an empty list\n            if len(self.fields) == 0:\n                self.fields = None\n        else:\n            self.fields = None\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_author","title":"<code>set_author(author)</code>","text":"<p>Set the author information of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>author</code> <code>EmbedAuthor | None</code> <p>Author information. If set to None, the author is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_author(self: Self, author: EmbedAuthor | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the author information of the Embed.\n\n    Arguments:\n        author (EmbedAuthor | None): Author information. If set to None, the author\n            is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.author = author\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_color","title":"<code>set_color(color)</code>","text":"<p>Set the color code of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str | int | None</code> <p>Color code of the Embed. If set to None, the color is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_color(self: Self, color: str | int | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the color code of the Embed.\n\n    Arguments:\n        color (str | int | None): Color code of the Embed. If set to None, the color\n            is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.color = color\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_description","title":"<code>set_description(description)</code>","text":"<p>Set the description of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str | None</code> <p>Description of Embed. If set to None, the description is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_description(self: Self, description: str | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the description of the Embed.\n\n    Arguments:\n        description (str | None): Description of Embed. If set to None, the description\n            is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.description = description\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_footer","title":"<code>set_footer(footer)</code>","text":"<p>Set the footer information of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>footer</code> <code>EmbedFooter | None</code> <p>Footer information. If set to None, the footer is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_footer(self: Self, footer: EmbedFooter | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the footer information of the Embed.\n\n    Arguments:\n        footer (EmbedFooter | None): Footer information. If set to None, the footer\n            is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.footer = footer\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_thumbnail","title":"<code>set_thumbnail(thumbnail)</code>","text":"<p>Set the thumbnail information of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>thumbnail</code> <code>EmbedThumbnail | None</code> <p>Thumbnail information. If set to None, the thumbnail is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_thumbnail(self: Self, thumbnail: EmbedThumbnail | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the thumbnail information of the Embed.\n\n    Arguments:\n        thumbnail (EmbedThumbnail | None): Thumbnail information. If set to None,\n            the thumbnail is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.thumbnail = thumbnail\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_timestamp","title":"<code>set_timestamp(timestamp)</code>","text":"<p>Set the timestamp of the Embed content.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>str | int | float | datetime | None</code> <p>Timestamp of Embed content. If set to None, the timestamp is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_timestamp(\n    self: Self, timestamp: int | float | str | datetime | None\n) -&gt; \"Embed\":\n    \"\"\"\n    Set the timestamp of the Embed content.\n\n    Arguments:\n        timestamp (str | int | float | datetime | None): Timestamp of Embed content.\n            If set to None, the timestamp is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.timestamp = timestamp\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_title","title":"<code>set_title(title)</code>","text":"<p>Set the title of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>Title of Embed. If set to None, the title is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_title(self: Self, title: str | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the title of the Embed.\n\n    Arguments:\n        title (str | None): Title of Embed. If set to None, the title is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.title = title\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.Embed.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Embed.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>URL of Embed. If set to None, the URL is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Embed</code> <p>The modified Embed instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_url(self: Self, url: str | None) -&gt; \"Embed\":\n    \"\"\"\n    Set the URL of the Embed.\n\n    Arguments:\n        url (str | None): URL of Embed. If set to None, the URL is cleared.\n\n    Returns:\n        self (Embed): The modified Embed instance.\n    \"\"\"\n    self.url = url\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedAuthor","title":"<code>EmbedAuthor</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent the Author information of an Embed.</p> <p>https://discord.com/developers/docs/resources/message#embed-object-embed-author-structure</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of author.</p> <code>url</code> <code>str | None</code> <p>URL of author (only supports HTTP(S)).</p> <code>icon_url</code> <code>str | None</code> <p>URL of author icon (only supports HTTP(S) and Attachments).</p> Source code in <code>clyde/embed.py</code> <pre><code>class EmbedAuthor(BaseModel):\n    \"\"\"\n    Represent the Author information of an Embed.\n\n    https://discord.com/developers/docs/resources/message#embed-object-embed-author-structure\n\n    Attributes:\n        name (str): Name of author.\n\n        url (str | None): URL of author (only supports HTTP(S)).\n\n        icon_url (str | None): URL of author icon (only supports HTTP(S) and Attachments).\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Embed Author class.\"\"\"\n\n    name: str | None = Field(default=None, max_length=256)\n    \"\"\"Name of author.\"\"\"\n\n    url: str | None = Field(default=None)\n    \"\"\"URL of author (only supports HTTP(S)).\"\"\"\n\n    icon_url: str | None = Field(default=None)\n    \"\"\"URL of author icon (only supports HTTP(S) and Attachments).\"\"\"\n\n    def set_name(self: Self, name: str) -&gt; \"EmbedAuthor\":\n        \"\"\"\n        Set the name that will be displayed in the Embed Author.\n\n        Arguments:\n            name (str): The name that will be displayed.\n\n        Returns:\n            self (EmbedAuthor): The modified Embed Author instance.\n        \"\"\"\n        self.name = name\n\n        return self\n\n    def set_url(self: Self, url: str) -&gt; \"EmbedAuthor\":\n        \"\"\"\n        Set the URL of the Embed Author instance.\n\n        Arguments:\n            url (str): An HTTP(S) URL.\n\n        Returns:\n            self (EmbedAuthor): The modified Embed Author instance.\n        \"\"\"\n        self.url = url\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str) -&gt; str:\n        \"\"\"\n        Validate the value of URL for an Embed Author.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(url, [\"http\", \"https\"])\n\n    def set_icon_url(self: Self, icon_url: str) -&gt; \"EmbedAuthor\":\n        \"\"\"\n        Set the icon URL of the Embed Author instance.\n\n        Arguments:\n            icon_url (str): An HTTP(S) or Attachment URL.\n\n        Returns:\n            self (EmbedAuthor): The modified Embed Author instance.\n        \"\"\"\n        self.icon_url = icon_url\n\n        return self\n\n    @field_validator(\"icon_url\", mode=\"after\")\n    @classmethod\n    def _validate_icon_url(cls, icon_url: str) -&gt; str:\n        \"\"\"\n        Validate the value of icon URL for an Embed Author.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(icon_url, [\"http\", \"https\", \"attachment\"])\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedAuthor.icon_url","title":"<code>icon_url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL of author icon (only supports HTTP(S) and Attachments).</p>"},{"location":"embed/#clyde.embed.EmbedAuthor.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Embed Author class.</p>"},{"location":"embed/#clyde.embed.EmbedAuthor.name","title":"<code>name = Field(default=None, max_length=256)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of author.</p>"},{"location":"embed/#clyde.embed.EmbedAuthor.url","title":"<code>url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL of author (only supports HTTP(S)).</p>"},{"location":"embed/#clyde.embed.EmbedAuthor.set_icon_url","title":"<code>set_icon_url(icon_url)</code>","text":"<p>Set the icon URL of the Embed Author instance.</p> <p>Parameters:</p> Name Type Description Default <code>icon_url</code> <code>str</code> <p>An HTTP(S) or Attachment URL.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedAuthor</code> <p>The modified Embed Author instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_icon_url(self: Self, icon_url: str) -&gt; \"EmbedAuthor\":\n    \"\"\"\n    Set the icon URL of the Embed Author instance.\n\n    Arguments:\n        icon_url (str): An HTTP(S) or Attachment URL.\n\n    Returns:\n        self (EmbedAuthor): The modified Embed Author instance.\n    \"\"\"\n    self.icon_url = icon_url\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedAuthor.set_name","title":"<code>set_name(name)</code>","text":"<p>Set the name that will be displayed in the Embed Author.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name that will be displayed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedAuthor</code> <p>The modified Embed Author instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_name(self: Self, name: str) -&gt; \"EmbedAuthor\":\n    \"\"\"\n    Set the name that will be displayed in the Embed Author.\n\n    Arguments:\n        name (str): The name that will be displayed.\n\n    Returns:\n        self (EmbedAuthor): The modified Embed Author instance.\n    \"\"\"\n    self.name = name\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedAuthor.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Embed Author instance.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>An HTTP(S) URL.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedAuthor</code> <p>The modified Embed Author instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_url(self: Self, url: str) -&gt; \"EmbedAuthor\":\n    \"\"\"\n    Set the URL of the Embed Author instance.\n\n    Arguments:\n        url (str): An HTTP(S) URL.\n\n    Returns:\n        self (EmbedAuthor): The modified Embed Author instance.\n    \"\"\"\n    self.url = url\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedField","title":"<code>EmbedField</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent field information in an Embed.</p> <p>https://discord.com/developers/docs/resources/message#embed-object-embed-field-structure</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the field.</p> <code>value</code> <code>str</code> <p>Value of the field.</p> <code>inline</code> <code>bool | None</code> <p>Whether or not this field should display inline.</p> Source code in <code>clyde/embed.py</code> <pre><code>class EmbedField(BaseModel):\n    \"\"\"\n    Represent field information in an Embed.\n\n    https://discord.com/developers/docs/resources/message#embed-object-embed-field-structure\n\n    Attributes:\n        name (str): Name of the field.\n\n        value (str): Value of the field.\n\n        inline (bool | None): Whether or not this field should display inline.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Embed Field class.\"\"\"\n\n    name: str | None = Field(default=None, max_length=256)\n    \"\"\"Name of the field.\"\"\"\n\n    value: str | None = Field(default=None, max_length=1024)\n    \"\"\"Value of the field.\"\"\"\n\n    inline: bool | None = Field(default=None)\n    \"\"\"Whether or not this field should display inline.\"\"\"\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedField.inline","title":"<code>inline = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether or not this field should display inline.</p>"},{"location":"embed/#clyde.embed.EmbedField.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Embed Field class.</p>"},{"location":"embed/#clyde.embed.EmbedField.name","title":"<code>name = Field(default=None, max_length=256)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the field.</p>"},{"location":"embed/#clyde.embed.EmbedField.value","title":"<code>value = Field(default=None, max_length=1024)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Value of the field.</p>"},{"location":"embed/#clyde.embed.EmbedFooter","title":"<code>EmbedFooter</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent the Footer information of an Embed.</p> <p>https://discord.com/developers/docs/resources/message#embed-object-embed-footer-structure</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>Footer text.</p> <code>icon_url</code> <code>str | None</code> <p>URL of Footer icon (only supports HTTP(S) and Attachments).</p> Source code in <code>clyde/embed.py</code> <pre><code>class EmbedFooter(BaseModel):\n    \"\"\"\n    Represent the Footer information of an Embed.\n\n    https://discord.com/developers/docs/resources/message#embed-object-embed-footer-structure\n\n    Attributes:\n        text (str): Footer text.\n\n        icon_url (str | None): URL of Footer icon (only supports HTTP(S) and Attachments).\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Embed Footer class.\"\"\"\n\n    text: str | None = Field(default=None, max_length=2048)\n    \"\"\"Footer text.\"\"\"\n\n    icon_url: str | None = Field(default=None)\n    \"\"\"URL of Footer icon (only supports HTTP(S) and Attachments).\"\"\"\n\n    def set_text(self: Self, text: str) -&gt; \"EmbedFooter\":\n        \"\"\"\n        Set the text that will be displayed in the Embed Footer.\n\n        Arguments:\n            text (str): The text that will be displayed.\n\n        Returns:\n            self (EmbedFooter): The modified Embed Footer instance.\n        \"\"\"\n        self.text = text\n\n        return self\n\n    def set_icon_url(self: Self, icon_url: str) -&gt; \"EmbedFooter\":\n        \"\"\"\n        Set the icon URL of the Embed Footer instance.\n\n        Arguments:\n            icon_url (str): An HTTP(S) or Attachment URL.\n\n        Returns:\n            self (EmbedFooter): The modified Embed Footer instance.\n        \"\"\"\n        self.icon_url = icon_url\n\n        return self\n\n    @field_validator(\"icon_url\", mode=\"after\")\n    @classmethod\n    def _validate_icon_url(cls, icon_url: str) -&gt; str:\n        \"\"\"\n        Validate the value of icon URL for an Embed Footer.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(icon_url, [\"http\", \"https\", \"attachment\"])\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedFooter.icon_url","title":"<code>icon_url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL of Footer icon (only supports HTTP(S) and Attachments).</p>"},{"location":"embed/#clyde.embed.EmbedFooter.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Embed Footer class.</p>"},{"location":"embed/#clyde.embed.EmbedFooter.text","title":"<code>text = Field(default=None, max_length=2048)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Footer text.</p>"},{"location":"embed/#clyde.embed.EmbedFooter.set_icon_url","title":"<code>set_icon_url(icon_url)</code>","text":"<p>Set the icon URL of the Embed Footer instance.</p> <p>Parameters:</p> Name Type Description Default <code>icon_url</code> <code>str</code> <p>An HTTP(S) or Attachment URL.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedFooter</code> <p>The modified Embed Footer instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_icon_url(self: Self, icon_url: str) -&gt; \"EmbedFooter\":\n    \"\"\"\n    Set the icon URL of the Embed Footer instance.\n\n    Arguments:\n        icon_url (str): An HTTP(S) or Attachment URL.\n\n    Returns:\n        self (EmbedFooter): The modified Embed Footer instance.\n    \"\"\"\n    self.icon_url = icon_url\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedFooter.set_text","title":"<code>set_text(text)</code>","text":"<p>Set the text that will be displayed in the Embed Footer.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text that will be displayed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedFooter</code> <p>The modified Embed Footer instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_text(self: Self, text: str) -&gt; \"EmbedFooter\":\n    \"\"\"\n    Set the text that will be displayed in the Embed Footer.\n\n    Arguments:\n        text (str): The text that will be displayed.\n\n    Returns:\n        self (EmbedFooter): The modified Embed Footer instance.\n    \"\"\"\n    self.text = text\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedImage","title":"<code>EmbedImage</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent the Image information of an Embed.</p> <p>https://discord.com/developers/docs/resources/message#embed-object-embed-image-structure</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>Source URL of image (only supports HTTP(S) and Attachments).</p> Source code in <code>clyde/embed.py</code> <pre><code>class EmbedImage(BaseModel):\n    \"\"\"\n    Represent the Image information of an Embed.\n\n    https://discord.com/developers/docs/resources/message#embed-object-embed-image-structure\n\n    Attributes:\n        url (str): Source URL of image (only supports HTTP(S) and Attachments).\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Embed Image class.\"\"\"\n\n    url: str | None = Field(default=None)\n    \"\"\"Source URL of image (only supports HTTP(S) and Attachments).\"\"\"\n\n    def set_url(self: Self, url: str) -&gt; \"EmbedImage\":\n        \"\"\"\n        Set the URL of the Embed Image instance.\n\n        Arguments:\n            url (str): An HTTP(S) or Attachment source URL.\n\n        Returns:\n            self (EmbedImage): The modified Embed Image instance.\n        \"\"\"\n        self.url = url\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str) -&gt; str:\n        \"\"\"\n        Validate the value of URL for an Embed Image.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(url, [\"http\", \"https\", \"attachment\"])\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedImage.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Embed Image class.</p>"},{"location":"embed/#clyde.embed.EmbedImage.url","title":"<code>url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Source URL of image (only supports HTTP(S) and Attachments).</p>"},{"location":"embed/#clyde.embed.EmbedImage.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Embed Image instance.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>An HTTP(S) or Attachment source URL.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedImage</code> <p>The modified Embed Image instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_url(self: Self, url: str) -&gt; \"EmbedImage\":\n    \"\"\"\n    Set the URL of the Embed Image instance.\n\n    Arguments:\n        url (str): An HTTP(S) or Attachment source URL.\n\n    Returns:\n        self (EmbedImage): The modified Embed Image instance.\n    \"\"\"\n    self.url = url\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedThumbnail","title":"<code>EmbedThumbnail</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent the Thumbnail information of an Embed.</p> <p>https://discord.com/developers/docs/resources/message#embed-object-embed-thumbnail-structure</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>Source URL of Thumbnail (only supports HTTP(S) and Attachments).</p> Source code in <code>clyde/embed.py</code> <pre><code>class EmbedThumbnail(BaseModel):\n    \"\"\"\n    Represent the Thumbnail information of an Embed.\n\n    https://discord.com/developers/docs/resources/message#embed-object-embed-thumbnail-structure\n\n    Attributes:\n        url (str): Source URL of Thumbnail (only supports HTTP(S) and Attachments).\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Embed Thumbnail class.\"\"\"\n\n    url: str | None = Field(default=None)\n    \"\"\"Source URL of Thumbnail (only supports HTTP(S) and Attachments).\"\"\"\n\n    def set_url(self: Self, url: str) -&gt; \"EmbedThumbnail\":\n        \"\"\"\n        Set the URL of the Embed Thumbnail instance.\n\n        Arguments:\n            url (str): An HTTP(S) or Attachment source URL.\n\n        Returns:\n            self (EmbedThumbnail): The modified Embed Thumbnail instance.\n        \"\"\"\n        self.url = url\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str) -&gt; str:\n        \"\"\"\n        Validate the value of URL for an Embed Thumbnail.\n\n        Arguments:\n            url (str): The value to validate.\n\n        Returns:\n            url (str): The validated URL value.\n        \"\"\"\n        return Validation.validate_url_scheme(url, [\"http\", \"https\", \"attachment\"])\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedThumbnail.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Embed Thumbnail class.</p>"},{"location":"embed/#clyde.embed.EmbedThumbnail.url","title":"<code>url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Source URL of Thumbnail (only supports HTTP(S) and Attachments).</p>"},{"location":"embed/#clyde.embed.EmbedThumbnail.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Embed Thumbnail instance.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>An HTTP(S) or Attachment source URL.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>EmbedThumbnail</code> <p>The modified Embed Thumbnail instance.</p> Source code in <code>clyde/embed.py</code> <pre><code>def set_url(self: Self, url: str) -&gt; \"EmbedThumbnail\":\n    \"\"\"\n    Set the URL of the Embed Thumbnail instance.\n\n    Arguments:\n        url (str): An HTTP(S) or Attachment source URL.\n\n    Returns:\n        self (EmbedThumbnail): The modified Embed Thumbnail instance.\n    \"\"\"\n    self.url = url\n\n    return self\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedTypes","title":"<code>EmbedTypes</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Define the available types of Discord Embeds.</p> <p>https://discord.com/developers/docs/resources/message#embed-object-embed-types</p> <p>Attributes:</p> Name Type Description <code>RICH</code> <code>str</code> <p>Generic Embed rendered from Embed attributes.</p> Source code in <code>clyde/embed.py</code> <pre><code>class EmbedTypes(StrEnum):\n    \"\"\"\n    Define the available types of Discord Embeds.\n\n    https://discord.com/developers/docs/resources/message#embed-object-embed-types\n\n    Attributes:\n        RICH (str): Generic Embed rendered from Embed attributes.\n    \"\"\"\n\n    RICH = \"rich\"\n    \"\"\"Generic Embed rendered from Embed attributes.\"\"\"\n</code></pre>"},{"location":"embed/#clyde.embed.EmbedTypes.RICH","title":"<code>RICH = 'rich'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Generic Embed rendered from Embed attributes.</p>"},{"location":"markdown/","title":"Markdown","text":"<p>Define the Markdown class and its associates.</p>"},{"location":"markdown/#clyde.markdown.Markdown","title":"<code>Markdown</code>","text":"<p>Define static methods for applying Discord-flavored Markdown formatting.</p> <p>Want to inject some flavor into your everyday text chat? You're in luck! Discord uses Markdown, a simple plain text formatting system that'll help you make your sentences stand out.</p> <p>https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline</p> Source code in <code>clyde/markdown.py</code> <pre><code>class Markdown:\n    \"\"\"\n    Define static methods for applying Discord-flavored Markdown formatting.\n\n    Want to inject some flavor into your everyday text chat? You're in luck! Discord uses\n    Markdown, a simple plain text formatting system that'll help you make your sentences\n    stand out.\n\n    https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline\n    \"\"\"\n\n    @staticmethod\n    def bold(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as bold.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as bold.\n        \"\"\"\n        return f\"**{content}**\"\n\n    @staticmethod\n    def italics(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as italics.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as italics.\n        \"\"\"\n        return f\"*{content}*\"\n\n    @staticmethod\n    def strikethrough(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as strikethrough.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as strikethrough.\n        \"\"\"\n        return f\"~~{content}~~\"\n\n    @staticmethod\n    def block_quote(content: str, multi_line: bool = True) -&gt; str:\n        \"\"\"\n        Format the provided content as a block quote.\n\n        Arguments:\n            content (str): The content to format.\n\n            multi_line (bool): Whether to use a multi-line block quote. Default is True.\n\n        Returns:\n            content (str): Content formatted as a block quote.\n        \"\"\"\n        if multi_line:\n            return f\"&gt;&gt;&gt; {content}\"\n        else:\n            return f\"&gt; {content}\"\n\n    @staticmethod\n    def inline_code(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as inline code.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as inline code.\n        \"\"\"\n        return f\"`{content}`\"\n\n    @staticmethod\n    def code_block(content: str, highlight: str | None = None) -&gt; str:\n        \"\"\"\n        Format the provided content as a code block.\n\n        Arguments:\n            content (str): The content to format.\n            highlight (str | None): The language for syntax highlighting.\n\n        Returns:\n            content (str): Content formatted as a code block.\n        \"\"\"\n        if not highlight:\n            highlight = \"\"\n\n        return f\"```{highlight}\\n{content}\\n```\"\n\n    @staticmethod\n    def spoiler(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as a spoiler.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as a spoiler.\n        \"\"\"\n        return f\"||{content}||\"\n\n    @staticmethod\n    def underline(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as underline.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as underline.\n        \"\"\"\n        return f\"__{content}__\"\n\n    @staticmethod\n    def header_1(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as header 1.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as a header 1.\n        \"\"\"\n        return f\"# {content}\"\n\n    @staticmethod\n    def header_2(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as header 2.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as a header 2.\n        \"\"\"\n        return f\"## {content}\"\n\n    @staticmethod\n    def header_3(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as header 3.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as a header 3.\n        \"\"\"\n        return f\"### {content}\"\n\n    @staticmethod\n    def subtext(content: str) -&gt; str:\n        \"\"\"\n        Format the provided content as subtext.\n\n        Arguments:\n            content (str): The content to format.\n\n        Returns:\n            content (str): Content formatted as subtext.\n        \"\"\"\n        result: str = \"\"\n\n        for line in content.splitlines():\n            line = line.strip()\n\n            if line == \"\":\n                result += \"\\n\"\n\n                continue\n\n            result += f\"-# {line}\\n\"\n\n        return result.strip()\n\n    @staticmethod\n    def masked_link(content: str, url: str) -&gt; str:\n        \"\"\"\n        Format the provided content as a masked link.\n\n        Arguments:\n            content (str): The content to format.\n\n            url (str): The URL to link to.\n\n        Returns:\n            content (str): Content formatted as a masked link.\n        \"\"\"\n        return f\"[{content}]({url})\"\n\n    @staticmethod\n    def bulleted_list(items: list[str]) -&gt; str:\n        \"\"\"\n        Format the provided items as a bulleted list.\n\n        Arguments:\n            items (list[str]): A list of items to format.\n\n        Returns:\n            content (str): Items formatted as a bulleted list.\n        \"\"\"\n        result: str = \"\"\n\n        for entry in items:\n            result += f\"- {entry}\\n\"\n\n        return result.strip()\n\n    @staticmethod\n    def numbered_list(items: list[str]) -&gt; str:\n        \"\"\"\n        Format the provided items as a numbered list.\n\n        Arguments:\n            items (list[str]): A list of items to format.\n\n        Returns:\n            content (str): Items formatted as a numbered list.\n        \"\"\"\n        result: str = \"\"\n        number: int = 1\n\n        for entry in items:\n            result += f\"{number}. {entry}\\n\"\n\n            number += 1\n\n        return result.strip()\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.block_quote","title":"<code>block_quote(content, multi_line=True)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as a block quote.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <code>multi_line</code> <code>bool</code> <p>Whether to use a multi-line block quote. Default is True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a block quote.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef block_quote(content: str, multi_line: bool = True) -&gt; str:\n    \"\"\"\n    Format the provided content as a block quote.\n\n    Arguments:\n        content (str): The content to format.\n\n        multi_line (bool): Whether to use a multi-line block quote. Default is True.\n\n    Returns:\n        content (str): Content formatted as a block quote.\n    \"\"\"\n    if multi_line:\n        return f\"&gt;&gt;&gt; {content}\"\n    else:\n        return f\"&gt; {content}\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.bold","title":"<code>bold(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as bold.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as bold.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef bold(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as bold.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as bold.\n    \"\"\"\n    return f\"**{content}**\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.bulleted_list","title":"<code>bulleted_list(items)</code>  <code>staticmethod</code>","text":"<p>Format the provided items as a bulleted list.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[str]</code> <p>A list of items to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Items formatted as a bulleted list.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef bulleted_list(items: list[str]) -&gt; str:\n    \"\"\"\n    Format the provided items as a bulleted list.\n\n    Arguments:\n        items (list[str]): A list of items to format.\n\n    Returns:\n        content (str): Items formatted as a bulleted list.\n    \"\"\"\n    result: str = \"\"\n\n    for entry in items:\n        result += f\"- {entry}\\n\"\n\n    return result.strip()\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.code_block","title":"<code>code_block(content, highlight=None)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as a code block.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <code>highlight</code> <code>str | None</code> <p>The language for syntax highlighting.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a code block.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef code_block(content: str, highlight: str | None = None) -&gt; str:\n    \"\"\"\n    Format the provided content as a code block.\n\n    Arguments:\n        content (str): The content to format.\n        highlight (str | None): The language for syntax highlighting.\n\n    Returns:\n        content (str): Content formatted as a code block.\n    \"\"\"\n    if not highlight:\n        highlight = \"\"\n\n    return f\"```{highlight}\\n{content}\\n```\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.header_1","title":"<code>header_1(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as header 1.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a header 1.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef header_1(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as header 1.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as a header 1.\n    \"\"\"\n    return f\"# {content}\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.header_2","title":"<code>header_2(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as header 2.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a header 2.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef header_2(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as header 2.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as a header 2.\n    \"\"\"\n    return f\"## {content}\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.header_3","title":"<code>header_3(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as header 3.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a header 3.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef header_3(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as header 3.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as a header 3.\n    \"\"\"\n    return f\"### {content}\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.inline_code","title":"<code>inline_code(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as inline code.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as inline code.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef inline_code(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as inline code.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as inline code.\n    \"\"\"\n    return f\"`{content}`\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.italics","title":"<code>italics(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as italics.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as italics.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef italics(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as italics.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as italics.\n    \"\"\"\n    return f\"*{content}*\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.masked_link","title":"<code>masked_link(content, url)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as a masked link.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <code>url</code> <code>str</code> <p>The URL to link to.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a masked link.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef masked_link(content: str, url: str) -&gt; str:\n    \"\"\"\n    Format the provided content as a masked link.\n\n    Arguments:\n        content (str): The content to format.\n\n        url (str): The URL to link to.\n\n    Returns:\n        content (str): Content formatted as a masked link.\n    \"\"\"\n    return f\"[{content}]({url})\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.numbered_list","title":"<code>numbered_list(items)</code>  <code>staticmethod</code>","text":"<p>Format the provided items as a numbered list.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[str]</code> <p>A list of items to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Items formatted as a numbered list.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef numbered_list(items: list[str]) -&gt; str:\n    \"\"\"\n    Format the provided items as a numbered list.\n\n    Arguments:\n        items (list[str]): A list of items to format.\n\n    Returns:\n        content (str): Items formatted as a numbered list.\n    \"\"\"\n    result: str = \"\"\n    number: int = 1\n\n    for entry in items:\n        result += f\"{number}. {entry}\\n\"\n\n        number += 1\n\n    return result.strip()\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.spoiler","title":"<code>spoiler(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as a spoiler.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as a spoiler.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef spoiler(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as a spoiler.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as a spoiler.\n    \"\"\"\n    return f\"||{content}||\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.strikethrough","title":"<code>strikethrough(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as strikethrough.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as strikethrough.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef strikethrough(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as strikethrough.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as strikethrough.\n    \"\"\"\n    return f\"~~{content}~~\"\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.subtext","title":"<code>subtext(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as subtext.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as subtext.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef subtext(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as subtext.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as subtext.\n    \"\"\"\n    result: str = \"\"\n\n    for line in content.splitlines():\n        line = line.strip()\n\n        if line == \"\":\n            result += \"\\n\"\n\n            continue\n\n        result += f\"-# {line}\\n\"\n\n    return result.strip()\n</code></pre>"},{"location":"markdown/#clyde.markdown.Markdown.underline","title":"<code>underline(content)</code>  <code>staticmethod</code>","text":"<p>Format the provided content as underline.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to format.</p> required <p>Returns:</p> Name Type Description <code>content</code> <code>str</code> <p>Content formatted as underline.</p> Source code in <code>clyde/markdown.py</code> <pre><code>@staticmethod\ndef underline(content: str) -&gt; str:\n    \"\"\"\n    Format the provided content as underline.\n\n    Arguments:\n        content (str): The content to format.\n\n    Returns:\n        content (str): Content formatted as underline.\n    \"\"\"\n    return f\"__{content}__\"\n</code></pre>"},{"location":"poll/","title":"Poll","text":"<p>Define the Poll class and its associates.</p>"},{"location":"poll/#clyde.poll.LayoutType","title":"<code>LayoutType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Define the available types of layouts for a Discord Poll.</p> <p>https://discord.com/developers/docs/resources/poll#layout-type</p> <p>Attributes:</p> Name Type Description <code>DEFAULT</code> <code>int</code> <p>The default layout type.</p> Source code in <code>clyde/poll.py</code> <pre><code>class LayoutType(IntEnum):\n    \"\"\"\n    Define the available types of layouts for a Discord Poll.\n\n    https://discord.com/developers/docs/resources/poll#layout-type\n\n    Attributes:\n        DEFAULT (int): The default layout type.\n    \"\"\"\n\n    DEFAULT = 1\n    \"\"\"The default layout type.\"\"\"\n</code></pre>"},{"location":"poll/#clyde.poll.LayoutType.DEFAULT","title":"<code>DEFAULT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The default layout type.</p>"},{"location":"poll/#clyde.poll.Poll","title":"<code>Poll</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Discord Poll object.</p> <p>https://discord.com/developers/docs/resources/poll#poll-create-request-object</p> <p>Attributes:</p> Name Type Description <code>question</code> <code>PollMediaQuestion</code> <p>The question of the poll.</p> <code>answers</code> <code>list[PollAnswer]</code> <p>Each of the answers available in the poll.</p> <code>expiry</code> <code>int | float | datetime | None</code> <p>The time when the poll ends.</p> <code>allow_multiselect</code> <code>bool | None</code> <p>Whether a user can select multiple answers.</p> <code>layout_type</code> <code>LayoutType</code> <p>The value of LayoutType.DEFAULT.</p> Source code in <code>clyde/poll.py</code> <pre><code>class Poll(BaseModel):\n    \"\"\"\n    Represent a Discord Poll object.\n\n    https://discord.com/developers/docs/resources/poll#poll-create-request-object\n\n    Attributes:\n        question (PollMediaQuestion): The question of the poll.\n\n        answers (list[PollAnswer]): Each of the answers available in the poll.\n\n        expiry (int | float | datetime | None): The time when the poll ends.\n\n        allow_multiselect (bool | None): Whether a user can select multiple answers.\n\n        layout_type (LayoutType): The value of LayoutType.DEFAULT.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Poll class.\"\"\"\n\n    question: PollMediaQuestion | None = Field(default=None)\n    \"\"\"The question of the poll.\"\"\"\n\n    answers: list[PollAnswer] | None = Field(default=None, max_length=10)\n    \"\"\"Each of the answers available in the poll.\"\"\"\n\n    expiry: int | float | datetime | None = Field(default=None)\n    \"\"\"The time when the poll ends.\"\"\"\n\n    allow_multiselect: bool | None = Field(default=None)\n    \"\"\"Whether a user can select multiple answers.\"\"\"\n\n    layout_type: int = Field(default=LayoutType.DEFAULT, frozen=True)\n    \"\"\"The value of LayoutType.DEFAULT.\"\"\"\n\n    def set_question(self: Self, question: PollMediaQuestion) -&gt; \"Poll\":\n        \"\"\"\n        Set the question of the Poll.\n\n        Arguments:\n            question (PollMediaQuestion): The question of the poll.\n\n        Returns:\n            self (Poll): The modified Poll instance.\n        \"\"\"\n        self.question = question\n\n        return self\n\n    def add_answer(self: Self, answer: PollAnswer | list[PollAnswer]) -&gt; \"Poll\":\n        \"\"\"\n        Add an answer to the Poll.\n\n        Arguments:\n            answer (PollAnswer | list[PollAnswer]): The Poll Answer or list of Poll Answers\n                to add to the Poll.\n\n        Returns:\n            self (Poll): The modified Poll instance.\n        \"\"\"\n        if not self.answers:\n            self.answers = []\n\n        if isinstance(answer, list):\n            self.answers.extend(answer)\n        else:\n            self.answers.append(answer)\n\n        return self\n\n    def remove_answer(\n        self: Self, answer: PollAnswer | list[PollAnswer] | None\n    ) -&gt; \"Poll\":\n        \"\"\"\n        Remove one or more answers from the Poll.\n\n        Arguments:\n            answer (PollAnswer | list[PollAnswer] | None): An answer or list of answers to\n                remove. If set to None, all answers are removed.\n\n        Returns:\n            self (Poll): The modified Poll instance.\n        \"\"\"\n        if self.answers:\n            if not answer:\n                self.answers = None\n            elif isinstance(answer, list):\n                for entry in answer:\n                    self.answers.remove(entry)\n            else:\n                self.answers.remove(answer)\n\n        return self\n\n    def set_expiry(self: Self, expiry: int | float | datetime | None) -&gt; \"Poll\":\n        \"\"\"\n        Set the time when the Poll ends.\n\n        Arguments:\n            expiry (int | float | datetime | None): The time when the Poll ends. If set\n                to None, the expiry is cleared.\n\n        Returns:\n            self (Poll): The modified Poll instance.\n        \"\"\"\n        self.expiry = expiry\n\n        return self\n\n    def set_allow_multiselect(self: Self, allow_multiselect: bool | None) -&gt; \"Poll\":\n        \"\"\"\n        Set whether a user can select multiple answers on the Poll.\n\n        Arguments:\n            allow_multiselect (bool | None): Whether the user can select multiple answers.\n                If set to None, allow_multiselect is cleared.\n\n        Returns:\n            self (Poll): The modified Poll instance.\n        \"\"\"\n        self.allow_multiselect = allow_multiselect\n\n        return self\n</code></pre>"},{"location":"poll/#clyde.poll.Poll.allow_multiselect","title":"<code>allow_multiselect = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether a user can select multiple answers.</p>"},{"location":"poll/#clyde.poll.Poll.answers","title":"<code>answers = Field(default=None, max_length=10)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Each of the answers available in the poll.</p>"},{"location":"poll/#clyde.poll.Poll.expiry","title":"<code>expiry = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The time when the poll ends.</p>"},{"location":"poll/#clyde.poll.Poll.layout_type","title":"<code>layout_type = Field(default=LayoutType.DEFAULT, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of LayoutType.DEFAULT.</p>"},{"location":"poll/#clyde.poll.Poll.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Poll class.</p>"},{"location":"poll/#clyde.poll.Poll.question","title":"<code>question = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The question of the poll.</p>"},{"location":"poll/#clyde.poll.Poll.add_answer","title":"<code>add_answer(answer)</code>","text":"<p>Add an answer to the Poll.</p> <p>Parameters:</p> Name Type Description Default <code>answer</code> <code>PollAnswer | list[PollAnswer]</code> <p>The Poll Answer or list of Poll Answers to add to the Poll.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Poll</code> <p>The modified Poll instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def add_answer(self: Self, answer: PollAnswer | list[PollAnswer]) -&gt; \"Poll\":\n    \"\"\"\n    Add an answer to the Poll.\n\n    Arguments:\n        answer (PollAnswer | list[PollAnswer]): The Poll Answer or list of Poll Answers\n            to add to the Poll.\n\n    Returns:\n        self (Poll): The modified Poll instance.\n    \"\"\"\n    if not self.answers:\n        self.answers = []\n\n    if isinstance(answer, list):\n        self.answers.extend(answer)\n    else:\n        self.answers.append(answer)\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.Poll.remove_answer","title":"<code>remove_answer(answer)</code>","text":"<p>Remove one or more answers from the Poll.</p> <p>Parameters:</p> Name Type Description Default <code>answer</code> <code>PollAnswer | list[PollAnswer] | None</code> <p>An answer or list of answers to remove. If set to None, all answers are removed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Poll</code> <p>The modified Poll instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def remove_answer(\n    self: Self, answer: PollAnswer | list[PollAnswer] | None\n) -&gt; \"Poll\":\n    \"\"\"\n    Remove one or more answers from the Poll.\n\n    Arguments:\n        answer (PollAnswer | list[PollAnswer] | None): An answer or list of answers to\n            remove. If set to None, all answers are removed.\n\n    Returns:\n        self (Poll): The modified Poll instance.\n    \"\"\"\n    if self.answers:\n        if not answer:\n            self.answers = None\n        elif isinstance(answer, list):\n            for entry in answer:\n                self.answers.remove(entry)\n        else:\n            self.answers.remove(answer)\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.Poll.set_allow_multiselect","title":"<code>set_allow_multiselect(allow_multiselect)</code>","text":"<p>Set whether a user can select multiple answers on the Poll.</p> <p>Parameters:</p> Name Type Description Default <code>allow_multiselect</code> <code>bool | None</code> <p>Whether the user can select multiple answers. If set to None, allow_multiselect is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Poll</code> <p>The modified Poll instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_allow_multiselect(self: Self, allow_multiselect: bool | None) -&gt; \"Poll\":\n    \"\"\"\n    Set whether a user can select multiple answers on the Poll.\n\n    Arguments:\n        allow_multiselect (bool | None): Whether the user can select multiple answers.\n            If set to None, allow_multiselect is cleared.\n\n    Returns:\n        self (Poll): The modified Poll instance.\n    \"\"\"\n    self.allow_multiselect = allow_multiselect\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.Poll.set_expiry","title":"<code>set_expiry(expiry)</code>","text":"<p>Set the time when the Poll ends.</p> <p>Parameters:</p> Name Type Description Default <code>expiry</code> <code>int | float | datetime | None</code> <p>The time when the Poll ends. If set to None, the expiry is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Poll</code> <p>The modified Poll instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_expiry(self: Self, expiry: int | float | datetime | None) -&gt; \"Poll\":\n    \"\"\"\n    Set the time when the Poll ends.\n\n    Arguments:\n        expiry (int | float | datetime | None): The time when the Poll ends. If set\n            to None, the expiry is cleared.\n\n    Returns:\n        self (Poll): The modified Poll instance.\n    \"\"\"\n    self.expiry = expiry\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.Poll.set_question","title":"<code>set_question(question)</code>","text":"<p>Set the question of the Poll.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>PollMediaQuestion</code> <p>The question of the poll.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Poll</code> <p>The modified Poll instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_question(self: Self, question: PollMediaQuestion) -&gt; \"Poll\":\n    \"\"\"\n    Set the question of the Poll.\n\n    Arguments:\n        question (PollMediaQuestion): The question of the poll.\n\n    Returns:\n        self (Poll): The modified Poll instance.\n    \"\"\"\n    self.question = question\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollAnswer","title":"<code>PollAnswer</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Poll Answer object.</p> <p>https://discord.com/developers/docs/resources/poll#poll-answer-object-poll-answer-object-structure</p> <p>Attributes:</p> Name Type Description <code>poll_media</code> <code>PollMediaAnswer</code> <p>The data of the answer.</p> Source code in <code>clyde/poll.py</code> <pre><code>class PollAnswer(BaseModel):\n    \"\"\"\n    Represent a Poll Answer object.\n\n    https://discord.com/developers/docs/resources/poll#poll-answer-object-poll-answer-object-structure\n\n    Attributes:\n        poll_media (PollMediaAnswer): The data of the answer.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Poll class.\"\"\"\n\n    poll_media: PollMediaAnswer | None = None\n    \"\"\"The data of the answer.\"\"\"\n\n    def set_poll_media(self: Self, poll_media: PollMediaAnswer) -&gt; \"PollAnswer\":\n        \"\"\"\n        Set the media of the Poll Answer.\n\n        Arguments:\n            poll_media (PollMediaAnswer): The data of the answer.\n\n        Returns:\n            self (PollAnswer): The modified Poll Answer instance.\n        \"\"\"\n        self.poll_media = poll_media\n\n        return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollAnswer.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Poll class.</p>"},{"location":"poll/#clyde.poll.PollAnswer.poll_media","title":"<code>poll_media = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The data of the answer.</p>"},{"location":"poll/#clyde.poll.PollAnswer.set_poll_media","title":"<code>set_poll_media(poll_media)</code>","text":"<p>Set the media of the Poll Answer.</p> <p>Parameters:</p> Name Type Description Default <code>poll_media</code> <code>PollMediaAnswer</code> <p>The data of the answer.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>PollAnswer</code> <p>The modified Poll Answer instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_poll_media(self: Self, poll_media: PollMediaAnswer) -&gt; \"PollAnswer\":\n    \"\"\"\n    Set the media of the Poll Answer.\n\n    Arguments:\n        poll_media (PollMediaAnswer): The data of the answer.\n\n    Returns:\n        self (PollAnswer): The modified Poll Answer instance.\n    \"\"\"\n    self.poll_media = poll_media\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollMediaAnswer","title":"<code>PollMediaAnswer</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Poll Media object for an answer.</p> <p>https://discord.com/developers/docs/resources/poll#poll-media-object-poll-media-object-structure</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str | None</code> <p>The text of the field.</p> <code>emoji</code> <code>str | None</code> <p>The emoji of the field.</p> Source code in <code>clyde/poll.py</code> <pre><code>class PollMediaAnswer(BaseModel):\n    \"\"\"\n    Represent a Poll Media object for an answer.\n\n    https://discord.com/developers/docs/resources/poll#poll-media-object-poll-media-object-structure\n\n    Attributes:\n        text (str | None): The text of the field.\n\n        emoji (str | None): The emoji of the field.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Poll class.\"\"\"\n\n    text: str | None = Field(default=None, max_length=55)\n    \"\"\"The text of the field.\"\"\"\n\n    emoji: str | None = Field(default=None)\n    \"\"\"The emoji of the field.\"\"\"\n\n    def set_text(self: Self, text: str | None) -&gt; \"PollMediaAnswer\":\n        \"\"\"\n        Set the text of the Poll Media.\n\n        Arguments:\n            text (str | None): The text of the field. If set to None, the text is cleared.\n\n        Returns:\n            self (PollMediaAnswer): The modified Poll Media instance.\n        \"\"\"\n        self.text = text\n\n        return self\n\n    def set_emoji(self: Self, emoji: str | None) -&gt; \"PollMediaAnswer\":\n        \"\"\"\n        Set the emoji of the Poll Media.\n\n        Arguments:\n            emoji (str | None): The emoji of the field. If set to None, the emoji is cleared.\n\n        Returns:\n            self (PollMediaAnswer): The modified Poll Media instance.\n        \"\"\"\n        self.emoji = emoji\n\n        return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollMediaAnswer.emoji","title":"<code>emoji = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The emoji of the field.</p>"},{"location":"poll/#clyde.poll.PollMediaAnswer.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Poll class.</p>"},{"location":"poll/#clyde.poll.PollMediaAnswer.text","title":"<code>text = Field(default=None, max_length=55)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The text of the field.</p>"},{"location":"poll/#clyde.poll.PollMediaAnswer.set_emoji","title":"<code>set_emoji(emoji)</code>","text":"<p>Set the emoji of the Poll Media.</p> <p>Parameters:</p> Name Type Description Default <code>emoji</code> <code>str | None</code> <p>The emoji of the field. If set to None, the emoji is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>PollMediaAnswer</code> <p>The modified Poll Media instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_emoji(self: Self, emoji: str | None) -&gt; \"PollMediaAnswer\":\n    \"\"\"\n    Set the emoji of the Poll Media.\n\n    Arguments:\n        emoji (str | None): The emoji of the field. If set to None, the emoji is cleared.\n\n    Returns:\n        self (PollMediaAnswer): The modified Poll Media instance.\n    \"\"\"\n    self.emoji = emoji\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollMediaAnswer.set_text","title":"<code>set_text(text)</code>","text":"<p>Set the text of the Poll Media.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>The text of the field. If set to None, the text is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>PollMediaAnswer</code> <p>The modified Poll Media instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_text(self: Self, text: str | None) -&gt; \"PollMediaAnswer\":\n    \"\"\"\n    Set the text of the Poll Media.\n\n    Arguments:\n        text (str | None): The text of the field. If set to None, the text is cleared.\n\n    Returns:\n        self (PollMediaAnswer): The modified Poll Media instance.\n    \"\"\"\n    self.text = text\n\n    return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollMediaQuestion","title":"<code>PollMediaQuestion</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Poll Media object for a question.</p> <p>https://discord.com/developers/docs/resources/poll#poll-media-object-poll-media-object-structure</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str | None</code> <p>The text of the field.</p> Source code in <code>clyde/poll.py</code> <pre><code>class PollMediaQuestion(BaseModel):\n    \"\"\"\n    Represent a Poll Media object for a question.\n\n    https://discord.com/developers/docs/resources/poll#poll-media-object-poll-media-object-structure\n\n    Attributes:\n        text (str | None): The text of the field.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Poll class.\"\"\"\n\n    text: str | None = Field(default=None, max_length=300)\n    \"\"\"The text of the field.\"\"\"\n\n    def set_text(self: Self, text: str) -&gt; \"PollMediaQuestion\":\n        \"\"\"\n        Set the text of the Poll Media.\n\n        Arguments:\n            text (str): The text of the field.\n\n        Returns:\n            self (PollMediaQuestion): The modified Poll Media instance.\n        \"\"\"\n        self.text = text\n\n        return self\n</code></pre>"},{"location":"poll/#clyde.poll.PollMediaQuestion.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Poll class.</p>"},{"location":"poll/#clyde.poll.PollMediaQuestion.text","title":"<code>text = Field(default=None, max_length=300)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The text of the field.</p>"},{"location":"poll/#clyde.poll.PollMediaQuestion.set_text","title":"<code>set_text(text)</code>","text":"<p>Set the text of the Poll Media.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text of the field.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>PollMediaQuestion</code> <p>The modified Poll Media instance.</p> Source code in <code>clyde/poll.py</code> <pre><code>def set_text(self: Self, text: str) -&gt; \"PollMediaQuestion\":\n    \"\"\"\n    Set the text of the Poll Media.\n\n    Arguments:\n        text (str): The text of the field.\n\n    Returns:\n        self (PollMediaQuestion): The modified Poll Media instance.\n    \"\"\"\n    self.text = text\n\n    return self\n</code></pre>"},{"location":"timestamp/","title":"Timestamp","text":"<p>Define the Timestamp class and its associates.</p>"},{"location":"timestamp/#clyde.timestamp.Timestamp","title":"<code>Timestamp</code>","text":"<p>Define static methods for applying Discord Timestamp formatting.</p> <p>Timestamps are expressed in seconds and display the given timestamp in the user's timezone and locale.</p> <p>https://discord.com/developers/docs/reference#message-formatting</p> Source code in <code>clyde/timestamp.py</code> <pre><code>class Timestamp:\n    \"\"\"\n    Define static methods for applying Discord Timestamp formatting.\n\n    Timestamps are expressed in seconds and display the given timestamp in the user's\n    timezone and locale.\n\n    https://discord.com/developers/docs/reference#message-formatting\n    \"\"\"\n\n    @staticmethod\n    def timestamp(value: int | float | str | datetime, style: TimestampStyles) -&gt; str:\n        \"\"\"\n        Format the provided timestamp to display in the user's timezone and locale.\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n            style (TimestampStyles): A Timestamp Style.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        if isinstance(value, float):\n            value = int(value)\n        elif isinstance(value, str):\n            value = int(datetime.fromisoformat(value).timestamp())\n        elif isinstance(value, datetime):\n            value = int(value.timestamp())\n\n        return f\"&lt;t:{value}:{style}&gt;\"\n\n    @staticmethod\n    def short_time(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Short Time.\n\n        Example Output: 4:20 PM\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.SHORT_TIME)\n\n    @staticmethod\n    def long_time(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Long Time.\n\n        Example Output: 4:20:30 PM\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.LONG_TIME)\n\n    @staticmethod\n    def short_date(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Short Date.\n\n        Example Output: 4/20/2025\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.SHORT_DATE)\n\n    @staticmethod\n    def long_date(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Long Date.\n\n        Example Output: April 20, 2025\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.LONG_DATE)\n\n    @staticmethod\n    def short_date_time(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Short Date/Time.\n\n        Example Output: April 20, 2025 04:20 PM\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.SHORT_DATE_TIME)\n\n    @staticmethod\n    def long_date_time(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Long Date/Time.\n\n        Example Output: Sunday, April 20, 2025 04:20 PM\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.LONG_DATE_TIME)\n\n    @staticmethod\n    def relative_time(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Format the provided timestamp as Relative Time.\n\n        Example Output: 2 months ago\n\n        Arguments:\n            value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        Returns:\n            timestamp (str): The formatted timestamp.\n        \"\"\"\n        return Timestamp.timestamp(value, TimestampStyles.RELATIVE_TIME)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.long_date","title":"<code>long_date(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Long Date.</p> <p>Example Output: April 20, 2025</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef long_date(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Long Date.\n\n    Example Output: April 20, 2025\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.LONG_DATE)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.long_date_time","title":"<code>long_date_time(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Long Date/Time.</p> <p>Example Output: Sunday, April 20, 2025 04:20 PM</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef long_date_time(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Long Date/Time.\n\n    Example Output: Sunday, April 20, 2025 04:20 PM\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.LONG_DATE_TIME)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.long_time","title":"<code>long_time(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Long Time.</p> <p>Example Output: 4:20:30 PM</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef long_time(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Long Time.\n\n    Example Output: 4:20:30 PM\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.LONG_TIME)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.relative_time","title":"<code>relative_time(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Relative Time.</p> <p>Example Output: 2 months ago</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef relative_time(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Relative Time.\n\n    Example Output: 2 months ago\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.RELATIVE_TIME)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.short_date","title":"<code>short_date(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Short Date.</p> <p>Example Output: 4/20/2025</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef short_date(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Short Date.\n\n    Example Output: 4/20/2025\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.SHORT_DATE)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.short_date_time","title":"<code>short_date_time(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Short Date/Time.</p> <p>Example Output: April 20, 2025 04:20 PM</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef short_date_time(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Short Date/Time.\n\n    Example Output: April 20, 2025 04:20 PM\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.SHORT_DATE_TIME)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.short_time","title":"<code>short_time(value)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp as Short Time.</p> <p>Example Output: 4:20 PM</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef short_time(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Format the provided timestamp as Short Time.\n\n    Example Output: 4:20 PM\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    return Timestamp.timestamp(value, TimestampStyles.SHORT_TIME)\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.Timestamp.timestamp","title":"<code>timestamp(value, style)</code>  <code>staticmethod</code>","text":"<p>Format the provided timestamp to display in the user's timezone and locale.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The timestamp expressed in seconds.</p> required <code>style</code> <code>TimestampStyles</code> <p>A Timestamp Style.</p> required <p>Returns:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>The formatted timestamp.</p> Source code in <code>clyde/timestamp.py</code> <pre><code>@staticmethod\ndef timestamp(value: int | float | str | datetime, style: TimestampStyles) -&gt; str:\n    \"\"\"\n    Format the provided timestamp to display in the user's timezone and locale.\n\n    Arguments:\n        value (int | float | str | datetime): The timestamp expressed in seconds.\n\n        style (TimestampStyles): A Timestamp Style.\n\n    Returns:\n        timestamp (str): The formatted timestamp.\n    \"\"\"\n    if isinstance(value, float):\n        value = int(value)\n    elif isinstance(value, str):\n        value = int(datetime.fromisoformat(value).timestamp())\n    elif isinstance(value, datetime):\n        value = int(value.timestamp())\n\n    return f\"&lt;t:{value}:{style}&gt;\"\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles","title":"<code>TimestampStyles</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Define the available styles of Discord Timestamps.</p> <p>https://discord.com/developers/docs/reference#message-formatting-timestamp-styles</p> Source code in <code>clyde/timestamp.py</code> <pre><code>class TimestampStyles(StrEnum):\n    \"\"\"\n    Define the available styles of Discord Timestamps.\n\n    https://discord.com/developers/docs/reference#message-formatting-timestamp-styles\n    \"\"\"\n\n    SHORT_TIME = \"t\"\n    \"\"\"Example Output: 4:20 PM\"\"\"\n\n    LONG_TIME = \"T\"\n    \"\"\"Example Output: 4:20:30 PM\"\"\"\n\n    SHORT_DATE = \"d\"\n    \"\"\"Example Output: 4/20/2025\"\"\"\n\n    LONG_DATE = \"D\"\n    \"\"\"Example Output: April 20, 2025\"\"\"\n\n    SHORT_DATE_TIME = \"f\"\n    \"\"\"Example Output: April 20, 2025 04:20 PM\"\"\"\n\n    LONG_DATE_TIME = \"F\"\n    \"\"\"Example Output: Sunday, April 20, 2025 04:20 PM\"\"\"\n\n    RELATIVE_TIME = \"R\"\n    \"\"\"Example Output: 2 months ago\"\"\"\n</code></pre>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.LONG_DATE","title":"<code>LONG_DATE = 'D'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: April 20, 2025</p>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.LONG_DATE_TIME","title":"<code>LONG_DATE_TIME = 'F'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: Sunday, April 20, 2025 04:20 PM</p>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.LONG_TIME","title":"<code>LONG_TIME = 'T'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: 4:20:30 PM</p>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.RELATIVE_TIME","title":"<code>RELATIVE_TIME = 'R'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: 2 months ago</p>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.SHORT_DATE","title":"<code>SHORT_DATE = 'd'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: 4/20/2025</p>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.SHORT_DATE_TIME","title":"<code>SHORT_DATE_TIME = 'f'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: April 20, 2025 04:20 PM</p>"},{"location":"timestamp/#clyde.timestamp.TimestampStyles.SHORT_TIME","title":"<code>SHORT_TIME = 't'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example Output: 4:20 PM</p>"},{"location":"validation/","title":"Validation","text":"<p>Define the Validation class and its associates.</p>"},{"location":"validation/#clyde.validation.Validation","title":"<code>Validation</code>","text":"<p>Define static methods for reusable data validation and conversion.</p> Source code in <code>clyde/validation.py</code> <pre><code>class Validation:\n    \"\"\"Define static methods for reusable data validation and conversion.\"\"\"\n\n    @staticmethod\n    def validate_color(value: str | int) -&gt; int:\n        \"\"\"\n        Validate\u2014and convert, if applicable\u2014a color value for Discord.\n\n        Arguments:\n            value (str | int): The value to validate.\n\n        Returns:\n            value (int): The validated color value.\n        \"\"\"\n        if isinstance(value, str):\n            if value.startswith(\"#\"):\n                # Discard the # in a hex color code\n                value = value[1:]\n\n            value = int(value, base=16)\n\n        return value\n\n    @staticmethod\n    def validate_timestamp(value: int | float | str | datetime) -&gt; str:\n        \"\"\"\n        Validate\u2014and convert, if applicable\u2014a timestamp value for Discord.\n\n        Arguments:\n            value (int | float | str | datetime): The value to validate.\n\n        Returns:\n            value (str): The validated value.\n        \"\"\"\n        if isinstance(value, int):\n            value = datetime.fromtimestamp(float(value))\n        elif isinstance(value, float):\n            value = datetime.fromtimestamp(value)\n        elif isinstance(value, str):\n            value = datetime.fromisoformat(value)\n\n        return value.isoformat()\n\n    @staticmethod\n    def validate_url_scheme(value: str | None, valid_scheme: list[str]) -&gt; str:\n        \"\"\"\n        Validate a URL value contains a valid scheme.\n\n        Arguments:\n            value (str): The URL to validate.\n\n            valid_scheme (list[str]): A list of valid URL schemes.\n\n        Returns:\n            value (str): The validated URL.\n        \"\"\"\n        if not value:\n            raise ValueError(\n                f\"Empty URL is not valid for scheme(s) {', '.join(valid_scheme)}\"\n            )\n\n        scheme: str = AnyUrl(value).scheme.lower()\n        valid_scheme = [_scheme.lower() for _scheme in valid_scheme]\n\n        if scheme not in valid_scheme:\n            raise ValueError(\n                f\"URL {value} is not valid for scheme(s) {', '.join(valid_scheme)}\"\n            )\n\n        return value\n</code></pre>"},{"location":"validation/#clyde.validation.Validation.validate_color","title":"<code>validate_color(value)</code>  <code>staticmethod</code>","text":"<p>Validate\u2014and convert, if applicable\u2014a color value for Discord.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str | int</code> <p>The value to validate.</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>int</code> <p>The validated color value.</p> Source code in <code>clyde/validation.py</code> <pre><code>@staticmethod\ndef validate_color(value: str | int) -&gt; int:\n    \"\"\"\n    Validate\u2014and convert, if applicable\u2014a color value for Discord.\n\n    Arguments:\n        value (str | int): The value to validate.\n\n    Returns:\n        value (int): The validated color value.\n    \"\"\"\n    if isinstance(value, str):\n        if value.startswith(\"#\"):\n            # Discard the # in a hex color code\n            value = value[1:]\n\n        value = int(value, base=16)\n\n    return value\n</code></pre>"},{"location":"validation/#clyde.validation.Validation.validate_timestamp","title":"<code>validate_timestamp(value)</code>  <code>staticmethod</code>","text":"<p>Validate\u2014and convert, if applicable\u2014a timestamp value for Discord.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int | float | str | datetime</code> <p>The value to validate.</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>The validated value.</p> Source code in <code>clyde/validation.py</code> <pre><code>@staticmethod\ndef validate_timestamp(value: int | float | str | datetime) -&gt; str:\n    \"\"\"\n    Validate\u2014and convert, if applicable\u2014a timestamp value for Discord.\n\n    Arguments:\n        value (int | float | str | datetime): The value to validate.\n\n    Returns:\n        value (str): The validated value.\n    \"\"\"\n    if isinstance(value, int):\n        value = datetime.fromtimestamp(float(value))\n    elif isinstance(value, float):\n        value = datetime.fromtimestamp(value)\n    elif isinstance(value, str):\n        value = datetime.fromisoformat(value)\n\n    return value.isoformat()\n</code></pre>"},{"location":"validation/#clyde.validation.Validation.validate_url_scheme","title":"<code>validate_url_scheme(value, valid_scheme)</code>  <code>staticmethod</code>","text":"<p>Validate a URL value contains a valid scheme.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The URL to validate.</p> required <code>valid_scheme</code> <code>list[str]</code> <p>A list of valid URL schemes.</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>The validated URL.</p> Source code in <code>clyde/validation.py</code> <pre><code>@staticmethod\ndef validate_url_scheme(value: str | None, valid_scheme: list[str]) -&gt; str:\n    \"\"\"\n    Validate a URL value contains a valid scheme.\n\n    Arguments:\n        value (str): The URL to validate.\n\n        valid_scheme (list[str]): A list of valid URL schemes.\n\n    Returns:\n        value (str): The validated URL.\n    \"\"\"\n    if not value:\n        raise ValueError(\n            f\"Empty URL is not valid for scheme(s) {', '.join(valid_scheme)}\"\n        )\n\n    scheme: str = AnyUrl(value).scheme.lower()\n    valid_scheme = [_scheme.lower() for _scheme in valid_scheme]\n\n    if scheme not in valid_scheme:\n        raise ValueError(\n            f\"URL {value} is not valid for scheme(s) {', '.join(valid_scheme)}\"\n        )\n\n    return value\n</code></pre>"},{"location":"webhook/","title":"Webhook","text":"<p>Define the Webhook class and its associates.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentionTypes","title":"<code>AllowedMentionTypes</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Define the available types to be used in an Allowed Mentions object.</p> <p>https://discord.com/developers/docs/resources/message#allowed-mentions-object</p> <p>Attributes:</p> Name Type Description <code>ROLE_MENTIONS</code> <code>str</code> <p>Controls role mentions.</p> <code>USER_MENTIONS</code> <code>str</code> <p>Controls user mentions.</p> <code>EVERYONE_MENTIONS</code> <code>str</code> <p>Controls @everyone and @here mentions.</p> Source code in <code>clyde/webhook.py</code> <pre><code>class AllowedMentionTypes(StrEnum):\n    \"\"\"\n    Define the available types to be used in an Allowed Mentions object.\n\n    https://discord.com/developers/docs/resources/message#allowed-mentions-object\n\n    Attributes:\n        ROLE_MENTIONS (str): Controls role mentions.\n\n        USER_MENTIONS (str): Controls user mentions.\n\n        EVERYONE_MENTIONS (str): Controls @everyone and @here mentions.\n    \"\"\"\n\n    ROLE_MENTIONS = \"roles\"\n    \"\"\"Controls role mentions.\"\"\"\n\n    USER_MENTIONS = \"users\"\n    \"\"\"Controls user mentions.\"\"\"\n\n    EVERYONE_MENTIONS = \"everyone\"\n    \"\"\"Controls @everyone and @here mentions.\"\"\"\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentionTypes.EVERYONE_MENTIONS","title":"<code>EVERYONE_MENTIONS = 'everyone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls @everyone and @here mentions.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentionTypes.ROLE_MENTIONS","title":"<code>ROLE_MENTIONS = 'roles'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls role mentions.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentionTypes.USER_MENTIONS","title":"<code>USER_MENTIONS = 'users'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls user mentions.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentions","title":"<code>AllowedMentions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent the Allowed Mentions object on a Discord message.</p> <p>The Allowed Mention field allows for more granular control over mentions. This will always validate against the message and Components to avoid phantom pings. If allowed_mentions is not passed in, the mentions will be parsed via the content.</p> <p>https://discord.com/developers/docs/resources/message#allowed-mentions-object</p> Source code in <code>clyde/webhook.py</code> <pre><code>class AllowedMentions(BaseModel):\n    \"\"\"\n    Represent the Allowed Mentions object on a Discord message.\n\n    The Allowed Mention field allows for more granular control over mentions. This will\n    always validate against the message and Components to avoid phantom pings. If\n    allowed_mentions is not passed in, the mentions will be parsed via the content.\n\n    https://discord.com/developers/docs/resources/message#allowed-mentions-object\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Webhook class.\"\"\"\n\n    parse: list[AllowedMentionTypes] | None = Field(default=None)\n    \"\"\"An array of Allowed Mention Types to parse from the content.\"\"\"\n\n    roles: list[str] | None = Field(default=None, max_length=100)\n    \"\"\"Array of role_ids to mention (max size of 100).\"\"\"\n\n    users: list[str] | None = Field(default=None, max_length=100)\n    \"\"\"Array of user_ids to mention (max size of 100).\"\"\"\n\n    replied_user: bool | None = Field(default=None)\n    \"\"\"For replies, whether to mention the author of the message being replied to.\"\"\"\n\n    def add_parse(\n        self: Self, parse: AllowedMentionTypes | list[AllowedMentionTypes]\n    ) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Add an Allowed Mention Type to parse from the content.\n\n        Arguments:\n            parse (AllowedMentionTypes | list[AllowedMentionTypes]): An Allowed Mention\n                Type or list of Allowed Mention Types to add.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        if parse == AllowedMentionTypes.USER_MENTIONS and self.users:\n            # No need for USER_MENTIONS if we already have users\n            return self\n        elif parse == AllowedMentionTypes.ROLE_MENTIONS and self.roles:\n            # No need for ROLE_MENTIONS if we already have roles\n            return self\n\n        if not self.parse:\n            self.parse = []\n\n        if isinstance(parse, list):\n            self.parse.extend(parse)\n        else:\n            self.parse.append(parse)\n\n        return self\n\n    def remove_parse(\n        self: Self, parse: AllowedMentionTypes | list[AllowedMentionTypes] | int | None\n    ) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Remove an Allowed Mention Type from the Allowed Mentions instance.\n\n        Arguments:\n            parse (AllowedMentionTypes | list[AllowedMentionTypes] | int | None): An Allowed\n                Mention Type, list of Allowed Mention Types, or an index to remove. If\n                set to None, the parse value is cleared.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        if self.parse:\n            if parse:\n                if isinstance(parse, list):\n                    for entry in parse:\n                        self.parse.remove(entry)\n                elif isinstance(parse, int):\n                    self.parse.pop(parse)\n                else:\n                    self.parse.remove(parse)\n\n                # Do not retain an empty list\n                if len(self.parse) == 0:\n                    self.parse = None\n            else:\n                self.parse = None\n\n        return self\n\n    def add_role(self: Self, role: str | list[str]) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Add a role ID to mention.\n\n        Arguments:\n            role (str | list[str]): A role ID or list of role IDs to add.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        if self.parse and AllowedMentionTypes.ROLE_MENTIONS in self.parse:\n            # No need for role if we already have ROLE_MENTIONS\n            return self\n\n        if not self.roles:\n            self.roles = []\n\n        if isinstance(role, list):\n            self.roles.extend(role)\n        else:\n            self.roles.append(role)\n\n        return self\n\n    def remove_role(\n        self: Self, role: str | list[str] | int | None\n    ) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Remove a role ID from the Allowed Mentions instance.\n\n        Arguments:\n            role (str | list[str] | int | None): A role ID, list of role IDs, or an index\n                to remove. If set to None, the roles value is cleared.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        if self.roles:\n            if role:\n                if isinstance(role, list):\n                    for entry in role:\n                        self.roles.remove(entry)\n                elif isinstance(role, int):\n                    self.roles.pop(role)\n                else:\n                    self.roles.remove(role)\n\n                # Do not retain an empty list\n                if len(self.roles) == 0:\n                    self.roles = None\n            else:\n                self.roles = None\n\n        return self\n\n    def add_user(self: Self, user: str | list[str]) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Add a user ID to mention.\n\n        Arguments:\n            user (str | list[str]): A user ID or list of user IDs to add.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        if self.parse and AllowedMentionTypes.USER_MENTIONS in self.parse:\n            # No need for user if we already have USER_MENTIONS\n            return self\n\n        if not self.users:\n            self.users = []\n\n        if isinstance(user, list):\n            self.users.extend(user)\n        else:\n            self.users.append(user)\n\n        return self\n\n    def remove_user(\n        self: Self, user: str | list[str] | int | None\n    ) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Remove a user ID from the Allowed Mentions instance.\n\n        Arguments:\n            user (str | list[str] | int | None): A user ID, list of user IDs, or an index\n                to remove. If set to None, the users value is cleared.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        if self.users:\n            if user:\n                if isinstance(user, list):\n                    for entry in user:\n                        self.users.remove(entry)\n                elif isinstance(user, int):\n                    self.users.pop(user)\n                else:\n                    self.users.remove(user)\n\n                # Do not retain an empty list\n                if len(self.users) == 0:\n                    self.users = None\n            else:\n                self.users = None\n\n        return self\n\n    def set_replied_user(self: Self, replied_user: bool | None) -&gt; \"AllowedMentions\":\n        \"\"\"\n        Set whether to mention the author of the message being replied to.\n\n        Arguments:\n            replied_user (bool | None): True to mention the author. If set to None, the\n                replied_user value is cleared.\n\n        Returns:\n            self (AllowedMentions): The modified Allowed Mentions instance.\n        \"\"\"\n        self.replied_user = replied_user\n\n        return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Webhook class.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentions.parse","title":"<code>parse = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An array of Allowed Mention Types to parse from the content.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentions.replied_user","title":"<code>replied_user = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>For replies, whether to mention the author of the message being replied to.</p>"},{"location":"webhook/#clyde.webhook.AllowedMentions.roles","title":"<code>roles = Field(default=None, max_length=100)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Array of role_ids to mention (max size of 100).</p>"},{"location":"webhook/#clyde.webhook.AllowedMentions.users","title":"<code>users = Field(default=None, max_length=100)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Array of user_ids to mention (max size of 100).</p>"},{"location":"webhook/#clyde.webhook.AllowedMentions.add_parse","title":"<code>add_parse(parse)</code>","text":"<p>Add an Allowed Mention Type to parse from the content.</p> <p>Parameters:</p> Name Type Description Default <code>parse</code> <code>AllowedMentionTypes | list[AllowedMentionTypes]</code> <p>An Allowed Mention Type or list of Allowed Mention Types to add.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def add_parse(\n    self: Self, parse: AllowedMentionTypes | list[AllowedMentionTypes]\n) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Add an Allowed Mention Type to parse from the content.\n\n    Arguments:\n        parse (AllowedMentionTypes | list[AllowedMentionTypes]): An Allowed Mention\n            Type or list of Allowed Mention Types to add.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    if parse == AllowedMentionTypes.USER_MENTIONS and self.users:\n        # No need for USER_MENTIONS if we already have users\n        return self\n    elif parse == AllowedMentionTypes.ROLE_MENTIONS and self.roles:\n        # No need for ROLE_MENTIONS if we already have roles\n        return self\n\n    if not self.parse:\n        self.parse = []\n\n    if isinstance(parse, list):\n        self.parse.extend(parse)\n    else:\n        self.parse.append(parse)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.add_role","title":"<code>add_role(role)</code>","text":"<p>Add a role ID to mention.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>str | list[str]</code> <p>A role ID or list of role IDs to add.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def add_role(self: Self, role: str | list[str]) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Add a role ID to mention.\n\n    Arguments:\n        role (str | list[str]): A role ID or list of role IDs to add.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    if self.parse and AllowedMentionTypes.ROLE_MENTIONS in self.parse:\n        # No need for role if we already have ROLE_MENTIONS\n        return self\n\n    if not self.roles:\n        self.roles = []\n\n    if isinstance(role, list):\n        self.roles.extend(role)\n    else:\n        self.roles.append(role)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.add_user","title":"<code>add_user(user)</code>","text":"<p>Add a user ID to mention.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str | list[str]</code> <p>A user ID or list of user IDs to add.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def add_user(self: Self, user: str | list[str]) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Add a user ID to mention.\n\n    Arguments:\n        user (str | list[str]): A user ID or list of user IDs to add.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    if self.parse and AllowedMentionTypes.USER_MENTIONS in self.parse:\n        # No need for user if we already have USER_MENTIONS\n        return self\n\n    if not self.users:\n        self.users = []\n\n    if isinstance(user, list):\n        self.users.extend(user)\n    else:\n        self.users.append(user)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.remove_parse","title":"<code>remove_parse(parse)</code>","text":"<p>Remove an Allowed Mention Type from the Allowed Mentions instance.</p> <p>Parameters:</p> Name Type Description Default <code>parse</code> <code>AllowedMentionTypes | list[AllowedMentionTypes] | int | None</code> <p>An Allowed Mention Type, list of Allowed Mention Types, or an index to remove. If set to None, the parse value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def remove_parse(\n    self: Self, parse: AllowedMentionTypes | list[AllowedMentionTypes] | int | None\n) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Remove an Allowed Mention Type from the Allowed Mentions instance.\n\n    Arguments:\n        parse (AllowedMentionTypes | list[AllowedMentionTypes] | int | None): An Allowed\n            Mention Type, list of Allowed Mention Types, or an index to remove. If\n            set to None, the parse value is cleared.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    if self.parse:\n        if parse:\n            if isinstance(parse, list):\n                for entry in parse:\n                    self.parse.remove(entry)\n            elif isinstance(parse, int):\n                self.parse.pop(parse)\n            else:\n                self.parse.remove(parse)\n\n            # Do not retain an empty list\n            if len(self.parse) == 0:\n                self.parse = None\n        else:\n            self.parse = None\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.remove_role","title":"<code>remove_role(role)</code>","text":"<p>Remove a role ID from the Allowed Mentions instance.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>str | list[str] | int | None</code> <p>A role ID, list of role IDs, or an index to remove. If set to None, the roles value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def remove_role(\n    self: Self, role: str | list[str] | int | None\n) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Remove a role ID from the Allowed Mentions instance.\n\n    Arguments:\n        role (str | list[str] | int | None): A role ID, list of role IDs, or an index\n            to remove. If set to None, the roles value is cleared.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    if self.roles:\n        if role:\n            if isinstance(role, list):\n                for entry in role:\n                    self.roles.remove(entry)\n            elif isinstance(role, int):\n                self.roles.pop(role)\n            else:\n                self.roles.remove(role)\n\n            # Do not retain an empty list\n            if len(self.roles) == 0:\n                self.roles = None\n        else:\n            self.roles = None\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.remove_user","title":"<code>remove_user(user)</code>","text":"<p>Remove a user ID from the Allowed Mentions instance.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str | list[str] | int | None</code> <p>A user ID, list of user IDs, or an index to remove. If set to None, the users value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def remove_user(\n    self: Self, user: str | list[str] | int | None\n) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Remove a user ID from the Allowed Mentions instance.\n\n    Arguments:\n        user (str | list[str] | int | None): A user ID, list of user IDs, or an index\n            to remove. If set to None, the users value is cleared.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    if self.users:\n        if user:\n            if isinstance(user, list):\n                for entry in user:\n                    self.users.remove(entry)\n            elif isinstance(user, int):\n                self.users.pop(user)\n            else:\n                self.users.remove(user)\n\n            # Do not retain an empty list\n            if len(self.users) == 0:\n                self.users = None\n        else:\n            self.users = None\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.AllowedMentions.set_replied_user","title":"<code>set_replied_user(replied_user)</code>","text":"<p>Set whether to mention the author of the message being replied to.</p> <p>Parameters:</p> Name Type Description Default <code>replied_user</code> <code>bool | None</code> <p>True to mention the author. If set to None, the replied_user value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>AllowedMentions</code> <p>The modified Allowed Mentions instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_replied_user(self: Self, replied_user: bool | None) -&gt; \"AllowedMentions\":\n    \"\"\"\n    Set whether to mention the author of the message being replied to.\n\n    Arguments:\n        replied_user (bool | None): True to mention the author. If set to None, the\n            replied_user value is cleared.\n\n    Returns:\n        self (AllowedMentions): The modified Allowed Mentions instance.\n    \"\"\"\n    self.replied_user = replied_user\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.MessageFlags","title":"<code>MessageFlags</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Define the available Flags to be set on a Discord message.</p> <p>https://discord.com/developers/docs/resources/message#message-object-message-flags</p> <p>Attributes:</p> Name Type Description <code>SUPPRESS_EMBEDS</code> <code>int</code> <p>Do not include any Embeds when serializing this message.</p> <code>SUPPRESS_NOTIFICATIONS</code> <code>int</code> <p>This message will not trigger push and desktop notifications.</p> <code>IS_COMPONENTS_V2</code> <code>int</code> <p>Allows you to create fully Component-driven messages.</p> Source code in <code>clyde/webhook.py</code> <pre><code>class MessageFlags(IntEnum):\n    \"\"\"\n    Define the available Flags to be set on a Discord message.\n\n    https://discord.com/developers/docs/resources/message#message-object-message-flags\n\n    Attributes:\n        SUPPRESS_EMBEDS (int): Do not include any Embeds when serializing this message.\n\n        SUPPRESS_NOTIFICATIONS (int): This message will not trigger push and desktop notifications.\n\n        IS_COMPONENTS_V2 (int): Allows you to create fully Component-driven messages.\n    \"\"\"\n\n    SUPPRESS_EMBEDS = 1 &lt;&lt; 2\n    \"\"\"Do not include any Embeds when serializing this message.\"\"\"\n\n    SUPPRESS_NOTIFICATIONS = 1 &lt;&lt; 12\n    \"\"\"This message will not trigger push and desktop notifications.\"\"\"\n\n    IS_COMPONENTS_V2 = 1 &lt;&lt; 15\n    \"\"\"Allows you to create fully Component-driven messages.\"\"\"\n</code></pre>"},{"location":"webhook/#clyde.webhook.MessageFlags.IS_COMPONENTS_V2","title":"<code>IS_COMPONENTS_V2 = 1 &lt;&lt; 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Allows you to create fully Component-driven messages.</p>"},{"location":"webhook/#clyde.webhook.MessageFlags.SUPPRESS_EMBEDS","title":"<code>SUPPRESS_EMBEDS = 1 &lt;&lt; 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Do not include any Embeds when serializing this message.</p>"},{"location":"webhook/#clyde.webhook.MessageFlags.SUPPRESS_NOTIFICATIONS","title":"<code>SUPPRESS_NOTIFICATIONS = 1 &lt;&lt; 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>This message will not trigger push and desktop notifications.</p>"},{"location":"webhook/#clyde.webhook.Webhook","title":"<code>Webhook</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a Discord Webhook object.</p> <p>Webhooks are a low-effort way to post messages to channels in Discord. They do not require a bot user or authentication to use.</p> <p>https://discord.com/developers/docs/resources/webhook</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str | HttpUrl | None</code> <p>The URL used for executing the Webhook.</p> <code>content</code> <code>str | None</code> <p>The message contents (up to 2000 characters).</p> <code>username</code> <code>str | None</code> <p>Override the default username of the Webhook.</p> <code>avatar_url</code> <code>str | None</code> <p>Override the default avatar of the Webhook.</p> <code>tts</code> <code>bool | None</code> <p>True if this is a TTS message.</p> <code>embeds</code> <code>list[Embed] | None</code> <p>Embedded rich content.</p> <code>allowed_mentions</code> <code>AllowedMentions | None</code> <p>Allowed mentions for the message.</p> <code>components</code> <code>list[TopLevelComponent] | None</code> <p>The Components to include with the message.</p> <code>files</code> <code>list[None] | None</code> <p>The contents of the file being sent.</p> <code>attachments</code> <code>list[None] | None</code> <p>Attachment objects with filename and description.</p> <code>flags</code> <code>int | None</code> <p>Message Flags combined as a bitfield.</p> <code>thread_name</code> <code>str | None</code> <p>Name of thread to create (requires the Webhook channel to be a forum or media channel).</p> <code>applied_tags</code> <code>list[str] | None</code> <p>Array of tag ids to apply to the thread (requires the Webhook channel to be a forum or media channel).</p> <code>poll</code> <code>Poll | None</code> <p>A Poll!</p> <code>_query_params</code> <code>dict[str, str]</code> <p>Additional query parameters to append to the URL.</p> Source code in <code>clyde/webhook.py</code> <pre><code>class Webhook(BaseModel):\n    \"\"\"\n    Represent a Discord Webhook object.\n\n    Webhooks are a low-effort way to post messages to channels in Discord. They do not\n    require a bot user or authentication to use.\n\n    https://discord.com/developers/docs/resources/webhook\n\n    Attributes:\n        url (str | HttpUrl | None): The URL used for executing the Webhook.\n\n        content (str | None): The message contents (up to 2000 characters).\n\n        username (str | None): Override the default username of the Webhook.\n\n        avatar_url (str | None): Override the default avatar of the Webhook.\n\n        tts (bool | None): True if this is a TTS message.\n\n        embeds (list[Embed] | None): Embedded rich content.\n\n        allowed_mentions (AllowedMentions | None): Allowed mentions for the message.\n\n        components (list[TopLevelComponent] | None): The Components to include with the message.\n\n        files (list[None] | None): The contents of the file being sent.\n\n        attachments (list[None] | None): Attachment objects with filename and description.\n\n        flags (int | None): Message Flags combined as a bitfield.\n\n        thread_name (str | None): Name of thread to create (requires the Webhook channel\n            to be a forum or media channel).\n\n        applied_tags (list[str] | None): Array of tag ids to apply to the thread (requires\n            the Webhook channel to be a forum or media channel).\n\n        poll (Poll | None): A Poll!\n\n        _query_params (dict[str, str]): Additional query parameters to append to the URL.\n    \"\"\"\n\n    model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)\n    \"\"\"Pydantic configuration for the Webhook class.\"\"\"\n\n    url: str | HttpUrl | None = Field(default=None, exclude=True)\n    \"\"\"The URL used for executing the Webhook.\"\"\"\n\n    content: str | None = Field(default=None, max_length=2000)\n    \"\"\"The message contents (up to 2000 characters).\"\"\"\n\n    username: str | None = Field(default=None)\n    \"\"\"Override the default username of the Webhook.\"\"\"\n\n    avatar_url: str | None = Field(default=None)\n    \"\"\"Override the default avatar of the Webhook.\"\"\"\n\n    tts: bool | None = Field(default=None)\n    \"\"\"True if this is a TTS message.\"\"\"\n\n    embeds: list[Embed] | None = Field(default=None, max_length=10)\n    \"\"\"Embedded rich content.\"\"\"\n\n    allowed_mentions: AllowedMentions | None = Field(default=None)\n    \"\"\"Allowed mentions for the message.\"\"\"\n\n    components: list[TopLevelComponent] | None = Field(default=None)\n    \"\"\"The Components to include with the message.\"\"\"\n\n    files: None = Field(default=None)\n    \"\"\"The contents of the file being sent.\"\"\"\n\n    attachments: None = Field(default=None)\n    \"\"\"Attachment objects with filename and description.\"\"\"\n\n    flags: int | None = Field(default=None)\n    \"\"\"Message Flags combined as a bitfield.\"\"\"\n\n    thread_name: str | None = Field(default=None)\n    \"\"\"Name of thread to create (requires the Webhook channel to be a forum or media channel).\"\"\"\n\n    applied_tags: list[str] | None = Field(default=None)\n    \"\"\"Array of tag ids to apply to the thread (requires the Webhook channel to be a forum or media channel).\"\"\"\n\n    poll: Poll | None = Field(default=None)\n    \"\"\"A Poll!\"\"\"\n\n    _query_params: dict[str, str] = {}\n    \"\"\"Additional query parameters to append to the URL.\"\"\"\n\n    def execute(self: Self) -&gt; Response:\n        \"\"\"\n        Execute the current Webhook instance.\n\n        https://discord.com/developers/docs/resources/webhook#execute-webhook\n\n        Returns:\n            res (Response): Response object for the execution request.\n        \"\"\"\n        if not self.url:\n            raise ValueError(\"Webhook URL cannot be None\")\n\n        res: Response = httpx.post(\n            str(self.url),\n            json=self.model_dump(exclude_none=True, serialize_as_any=True),\n            params=self._query_params,\n        )\n\n        logging.debug(f\"{res.request.method=} {res.request.content=}\")\n        logging.debug(f\"{res.status_code=} {res.text=}\")\n\n        return res.raise_for_status()\n\n    async def execute_async(self: Self) -&gt; Response:\n        \"\"\"\n        Asynchronously execute the current Webhook instance.\n\n        https://discord.com/developers/docs/resources/webhook#execute-webhook\n\n        Returns:\n            res (Response): Response object for the execution request.\n        \"\"\"\n        if not self.url:\n            raise ValueError(\"Webhook URL cannot be None\")\n\n        async with AsyncClient() as client:\n            res: Response = await client.post(\n                str(self.url),\n                json=self.model_dump(exclude_none=True, serialize_as_any=True),\n                params=self._query_params,\n            )\n\n        logging.debug(f\"{res.request.method=} {res.request.content=}\")\n        logging.debug(f\"{res.status_code=} {res.text=}\")\n\n        return res.raise_for_status()\n\n    def set_url(self: Self, url: str) -&gt; \"Webhook\":\n        \"\"\"\n        Set the URL of the Webhook.\n\n        Arguments:\n            url (str): A Discord Webhook URL.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.url = HttpUrl(url)\n\n        return self\n\n    def set_content(self: Self, content: str | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set the message content of the Webhook.\n\n        Arguments:\n            content (str | None): Message content. If set to None, the message content\n                is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.content = content\n\n        return self\n\n    def set_username(self: Self, username: str | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set the username of the Webhook instance.\n\n        Arguments:\n            username (str | None): A username. If set to None, the username is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.username = username\n\n        return self\n\n    def set_avatar_url(self: Self, avatar_url: str | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set the avatar URL of the Webhook instance.\n\n        Arguments:\n            avatar_url (str | None): An image URL. If set to None, the avatar_url is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        if avatar_url:\n            avatar_url = str(HttpUrl(avatar_url))\n\n        self.avatar_url = avatar_url\n\n        return self\n\n    def set_tts(self: Self, tts: bool | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set whether the Webhook instance is a text-to-speech message.\n\n        Arguments:\n            tts (bool | None): Toggle text-to-speech functionality. If set to None, the\n                tts value is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.tts = tts\n\n        return self\n\n    def add_embed(self: Self, embed: Embed | list[Embed]) -&gt; \"Webhook\":\n        \"\"\"\n        Add embedded rich content to the Webhook instance.\n\n        Arguments:\n            embed (Embed | list[Embed]): An Embed or list of Embeds.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        if not self.embeds:\n            self.embeds = []\n\n        if isinstance(embed, Embed):\n            self.embeds.append(embed)\n        else:\n            self.embeds.extend(embed)\n\n        return self\n\n    def remove_embed(self: Self, embed: Embed | list[Embed] | int | None) -&gt; \"Webhook\":\n        \"\"\"\n        Remove embedded rich content from the Webhook instance.\n\n        Arguments:\n            embed (Embed | list[Embed] | int | None): An Embed, list of Embeds, or an index\n                to remove. If set to None, all Embeds are removed.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        if self.embeds:\n            if embed:\n                if isinstance(embed, list):\n                    for entry in embed:\n                        self.embeds.remove(entry)\n                elif isinstance(embed, int):\n                    self.embeds.pop(embed)\n                else:\n                    self.embeds.remove(embed)\n\n                # Do not retain an empty list\n                if len(self.embeds) == 0:\n                    self.embeds = None\n            else:\n                self.embeds = None\n\n        return self\n\n    def set_allowed_mentions(\n        self: Self, allowed_mentions: AllowedMentions | None\n    ) -&gt; \"Webhook\":\n        \"\"\"\n        Set the allowed mentions for the Webhook instance.\n\n        Arguments:\n            allowed_mentions (AllowedMentions | None): An Allowed Mentions object. If set\n                to None, the allowed_mentions value is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.allowed_mentions = allowed_mentions\n\n        return self\n\n    def add_component(\n        self: Self, component: TopLevelComponent | list[TopLevelComponent]\n    ) -&gt; \"Webhook\":\n        \"\"\"\n        Add a Component to the Webhook instance.\n\n        Arguments:\n            component (TopLevelComponent | list[TopLevelComponent]): A Component or list\n                of Components.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        if not self.components:\n            self.components = []\n\n        if not self.get_flag(MessageFlags.IS_COMPONENTS_V2):\n            self.set_flag(MessageFlags.IS_COMPONENTS_V2, True)\n\n        self._set_with_components(True)\n\n        if isinstance(component, list):\n            self.components.extend(component)\n        else:\n            self.components.append(component)\n\n        return self\n\n    def remove_component(\n        self: Self, component: TopLevelComponent | list[TopLevelComponent] | int | None\n    ) -&gt; \"Webhook\":\n        \"\"\"\n        Remove a Component from the Webhook instance.\n\n        Arguments:\n            component (TopLevelComponent | list[TopLevelComponent] | int | None): A Component,\n                list of Components, or an index to remove. If set to None, all Components\n                are removed.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        if self.components:\n            if component:\n                if isinstance(component, list):\n                    for entry in component:\n                        self.components.remove(entry)\n                elif isinstance(component, int):\n                    self.components.pop(component)\n                else:\n                    self.components.remove(component)\n\n                # Do not retain an empty list\n                if len(self.components) == 0:\n                    self.components = None\n            else:\n                self.components = None\n\n        # Do not retain unused values\n        if not self.components:\n            self._set_with_components(None)\n            self.set_flag(MessageFlags.IS_COMPONENTS_V2, None)\n\n        return self\n\n    def set_flag(\n        self: Self, flag: MessageFlags, value: Literal[True] | None\n    ) -&gt; \"Webhook\":\n        \"\"\"\n        Set a Message Flag for the Webhook instance.\n\n        Arguments:\n            flag (MessageFlag): A Discord Message Flag.\n\n            value (Literal[True] | None): Toggle the Message Flag. If set to None, the\n                flag is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        if not self.flags:\n            self.flags = 0\n\n        if value:\n            # Enable the Message Flag\n            self.flags |= flag\n        else:\n            # Disable the Message Flag\n            self.flags &amp;= ~flag\n\n        return self\n\n    def get_flag(self: Self, flag: MessageFlags) -&gt; bool:\n        \"\"\"\n        Get the value of a Message Flag from the Webhook instance.\n\n        Arguments:\n            flag (MessageFlag): A Discord Message Flag.\n\n        Returns:\n            value (bool): The value of the Message Flag.\n        \"\"\"\n        if self.flags and (self.flags &amp; flag):\n            return True\n\n        return False\n\n    def set_thread_name(self: Self, thread_name: str | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set the name of the thread to create.\n\n        Requires the Webhook channel to be a forum or media channel.\n\n        Arguments:\n            thread_name (str | None): A thread name. If set to None, the thread_name value\n                is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.thread_name = thread_name\n\n        return self\n\n    def set_poll(self: Self, poll: Poll) -&gt; \"Webhook\":\n        \"\"\"\n        Set a Poll for the Webhook instance.\n\n        Arguments:\n            poll (Poll): A Discord Poll object.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        self.poll = poll\n\n        return self\n\n    def set_wait(self: Self, wait: bool | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set whether to wait for the Webhook request response from Discord.\n\n        Arguments:\n            wait (bool | None): Toggle wait functionality. If set to None, the wait value\n                is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        key: str = \"wait\"\n\n        if wait is None:\n            if self._query_params.get(key):\n                self._query_params.pop(key)\n        else:\n            self._query_params[key] = str(wait)\n\n        return self\n\n    def set_thread_id(self: Self, thread_id: str | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set the thread to message within the Webhook's channel.\n\n        Arguments:\n            thread_id (str | None): A thread ID. If set to None, the thread_id value\n                is cleared.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        key: str = \"thread_id\"\n\n        if thread_id is None:\n            if self._query_params.get(key):\n                self._query_params.pop(key)\n        else:\n            self._query_params[key] = thread_id\n\n        return self\n\n    def _set_with_components(self: Self, with_components: bool | None) -&gt; \"Webhook\":\n        \"\"\"\n        Set whether the Webhook instance uses the with_components query parameter.\n\n        Arguments:\n            with_components (bool | None): Toggle with_components query parameter. If set\n                to None, the with_components parameter is removed.\n\n        Returns:\n            self (Webhook): The modified Webhook instance.\n        \"\"\"\n        key: str = \"with_components\"\n\n        if with_components is None:\n            if self._query_params.get(key):\n                self._query_params.pop(key)\n        else:\n            self._query_params[key] = str(with_components)\n\n        return self\n\n    @field_validator(\"url\", mode=\"after\")\n    @classmethod\n    def _validate_url(cls, url: str | HttpUrl) -&gt; HttpUrl:\n        \"\"\"\n        Validate whether the value of URL is a valid Discord Webhook URL.\n\n        Arguments:\n            url (str | HttpUrl): A URL to validate.\n\n        Returns:\n            url (HttpUrl): The validate Webhook URL value.\n        \"\"\"\n        if isinstance(url, str):\n            url = HttpUrl(url)\n\n        if url.scheme.lower() != \"https\":\n            raise ValueError(\"Webhook URL scheme is not HTTPS\")\n        elif not url.host or url.host.lower() not in [\n            \"discord.com\",\n            \"canary.discord.com\",\n        ]:\n            raise ValueError(\"Webhook URL host is not a Discord domain\")\n        elif not url.path or not url.path.lower().startswith(\"/api/webhooks/\"):\n            raise ValueError(\"Webhook URL path is not valid\")\n\n        return url\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.allowed_mentions","title":"<code>allowed_mentions = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Allowed mentions for the message.</p>"},{"location":"webhook/#clyde.webhook.Webhook.applied_tags","title":"<code>applied_tags = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Array of tag ids to apply to the thread (requires the Webhook channel to be a forum or media channel).</p>"},{"location":"webhook/#clyde.webhook.Webhook.attachments","title":"<code>attachments = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Attachment objects with filename and description.</p>"},{"location":"webhook/#clyde.webhook.Webhook.avatar_url","title":"<code>avatar_url = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Override the default avatar of the Webhook.</p>"},{"location":"webhook/#clyde.webhook.Webhook.components","title":"<code>components = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Components to include with the message.</p>"},{"location":"webhook/#clyde.webhook.Webhook.content","title":"<code>content = Field(default=None, max_length=2000)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The message contents (up to 2000 characters).</p>"},{"location":"webhook/#clyde.webhook.Webhook.embeds","title":"<code>embeds = Field(default=None, max_length=10)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Embedded rich content.</p>"},{"location":"webhook/#clyde.webhook.Webhook.files","title":"<code>files = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The contents of the file being sent.</p>"},{"location":"webhook/#clyde.webhook.Webhook.flags","title":"<code>flags = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Message Flags combined as a bitfield.</p>"},{"location":"webhook/#clyde.webhook.Webhook.model_config","title":"<code>model_config = ConfigDict(use_attribute_docstrings=True, validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pydantic configuration for the Webhook class.</p>"},{"location":"webhook/#clyde.webhook.Webhook.poll","title":"<code>poll = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A Poll!</p>"},{"location":"webhook/#clyde.webhook.Webhook.thread_name","title":"<code>thread_name = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of thread to create (requires the Webhook channel to be a forum or media channel).</p>"},{"location":"webhook/#clyde.webhook.Webhook.tts","title":"<code>tts = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>True if this is a TTS message.</p>"},{"location":"webhook/#clyde.webhook.Webhook.url","title":"<code>url = Field(default=None, exclude=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL used for executing the Webhook.</p>"},{"location":"webhook/#clyde.webhook.Webhook.username","title":"<code>username = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Override the default username of the Webhook.</p>"},{"location":"webhook/#clyde.webhook.Webhook.add_component","title":"<code>add_component(component)</code>","text":"<p>Add a Component to the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>TopLevelComponent | list[TopLevelComponent]</code> <p>A Component or list of Components.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def add_component(\n    self: Self, component: TopLevelComponent | list[TopLevelComponent]\n) -&gt; \"Webhook\":\n    \"\"\"\n    Add a Component to the Webhook instance.\n\n    Arguments:\n        component (TopLevelComponent | list[TopLevelComponent]): A Component or list\n            of Components.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    if not self.components:\n        self.components = []\n\n    if not self.get_flag(MessageFlags.IS_COMPONENTS_V2):\n        self.set_flag(MessageFlags.IS_COMPONENTS_V2, True)\n\n    self._set_with_components(True)\n\n    if isinstance(component, list):\n        self.components.extend(component)\n    else:\n        self.components.append(component)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.add_embed","title":"<code>add_embed(embed)</code>","text":"<p>Add embedded rich content to the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>embed</code> <code>Embed | list[Embed]</code> <p>An Embed or list of Embeds.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def add_embed(self: Self, embed: Embed | list[Embed]) -&gt; \"Webhook\":\n    \"\"\"\n    Add embedded rich content to the Webhook instance.\n\n    Arguments:\n        embed (Embed | list[Embed]): An Embed or list of Embeds.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    if not self.embeds:\n        self.embeds = []\n\n    if isinstance(embed, Embed):\n        self.embeds.append(embed)\n    else:\n        self.embeds.extend(embed)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.execute","title":"<code>execute()</code>","text":"<p>Execute the current Webhook instance.</p> <p>https://discord.com/developers/docs/resources/webhook#execute-webhook</p> <p>Returns:</p> Name Type Description <code>res</code> <code>Response</code> <p>Response object for the execution request.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def execute(self: Self) -&gt; Response:\n    \"\"\"\n    Execute the current Webhook instance.\n\n    https://discord.com/developers/docs/resources/webhook#execute-webhook\n\n    Returns:\n        res (Response): Response object for the execution request.\n    \"\"\"\n    if not self.url:\n        raise ValueError(\"Webhook URL cannot be None\")\n\n    res: Response = httpx.post(\n        str(self.url),\n        json=self.model_dump(exclude_none=True, serialize_as_any=True),\n        params=self._query_params,\n    )\n\n    logging.debug(f\"{res.request.method=} {res.request.content=}\")\n    logging.debug(f\"{res.status_code=} {res.text=}\")\n\n    return res.raise_for_status()\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.execute_async","title":"<code>execute_async()</code>  <code>async</code>","text":"<p>Asynchronously execute the current Webhook instance.</p> <p>https://discord.com/developers/docs/resources/webhook#execute-webhook</p> <p>Returns:</p> Name Type Description <code>res</code> <code>Response</code> <p>Response object for the execution request.</p> Source code in <code>clyde/webhook.py</code> <pre><code>async def execute_async(self: Self) -&gt; Response:\n    \"\"\"\n    Asynchronously execute the current Webhook instance.\n\n    https://discord.com/developers/docs/resources/webhook#execute-webhook\n\n    Returns:\n        res (Response): Response object for the execution request.\n    \"\"\"\n    if not self.url:\n        raise ValueError(\"Webhook URL cannot be None\")\n\n    async with AsyncClient() as client:\n        res: Response = await client.post(\n            str(self.url),\n            json=self.model_dump(exclude_none=True, serialize_as_any=True),\n            params=self._query_params,\n        )\n\n    logging.debug(f\"{res.request.method=} {res.request.content=}\")\n    logging.debug(f\"{res.status_code=} {res.text=}\")\n\n    return res.raise_for_status()\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.get_flag","title":"<code>get_flag(flag)</code>","text":"<p>Get the value of a Message Flag from the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code>MessageFlag</code> <p>A Discord Message Flag.</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>bool</code> <p>The value of the Message Flag.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def get_flag(self: Self, flag: MessageFlags) -&gt; bool:\n    \"\"\"\n    Get the value of a Message Flag from the Webhook instance.\n\n    Arguments:\n        flag (MessageFlag): A Discord Message Flag.\n\n    Returns:\n        value (bool): The value of the Message Flag.\n    \"\"\"\n    if self.flags and (self.flags &amp; flag):\n        return True\n\n    return False\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.remove_component","title":"<code>remove_component(component)</code>","text":"<p>Remove a Component from the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>TopLevelComponent | list[TopLevelComponent] | int | None</code> <p>A Component, list of Components, or an index to remove. If set to None, all Components are removed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def remove_component(\n    self: Self, component: TopLevelComponent | list[TopLevelComponent] | int | None\n) -&gt; \"Webhook\":\n    \"\"\"\n    Remove a Component from the Webhook instance.\n\n    Arguments:\n        component (TopLevelComponent | list[TopLevelComponent] | int | None): A Component,\n            list of Components, or an index to remove. If set to None, all Components\n            are removed.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    if self.components:\n        if component:\n            if isinstance(component, list):\n                for entry in component:\n                    self.components.remove(entry)\n            elif isinstance(component, int):\n                self.components.pop(component)\n            else:\n                self.components.remove(component)\n\n            # Do not retain an empty list\n            if len(self.components) == 0:\n                self.components = None\n        else:\n            self.components = None\n\n    # Do not retain unused values\n    if not self.components:\n        self._set_with_components(None)\n        self.set_flag(MessageFlags.IS_COMPONENTS_V2, None)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.remove_embed","title":"<code>remove_embed(embed)</code>","text":"<p>Remove embedded rich content from the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>embed</code> <code>Embed | list[Embed] | int | None</code> <p>An Embed, list of Embeds, or an index to remove. If set to None, all Embeds are removed.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def remove_embed(self: Self, embed: Embed | list[Embed] | int | None) -&gt; \"Webhook\":\n    \"\"\"\n    Remove embedded rich content from the Webhook instance.\n\n    Arguments:\n        embed (Embed | list[Embed] | int | None): An Embed, list of Embeds, or an index\n            to remove. If set to None, all Embeds are removed.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    if self.embeds:\n        if embed:\n            if isinstance(embed, list):\n                for entry in embed:\n                    self.embeds.remove(entry)\n            elif isinstance(embed, int):\n                self.embeds.pop(embed)\n            else:\n                self.embeds.remove(embed)\n\n            # Do not retain an empty list\n            if len(self.embeds) == 0:\n                self.embeds = None\n        else:\n            self.embeds = None\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_allowed_mentions","title":"<code>set_allowed_mentions(allowed_mentions)</code>","text":"<p>Set the allowed mentions for the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>allowed_mentions</code> <code>AllowedMentions | None</code> <p>An Allowed Mentions object. If set to None, the allowed_mentions value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_allowed_mentions(\n    self: Self, allowed_mentions: AllowedMentions | None\n) -&gt; \"Webhook\":\n    \"\"\"\n    Set the allowed mentions for the Webhook instance.\n\n    Arguments:\n        allowed_mentions (AllowedMentions | None): An Allowed Mentions object. If set\n            to None, the allowed_mentions value is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.allowed_mentions = allowed_mentions\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_avatar_url","title":"<code>set_avatar_url(avatar_url)</code>","text":"<p>Set the avatar URL of the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>avatar_url</code> <code>str | None</code> <p>An image URL. If set to None, the avatar_url is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_avatar_url(self: Self, avatar_url: str | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set the avatar URL of the Webhook instance.\n\n    Arguments:\n        avatar_url (str | None): An image URL. If set to None, the avatar_url is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    if avatar_url:\n        avatar_url = str(HttpUrl(avatar_url))\n\n    self.avatar_url = avatar_url\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_content","title":"<code>set_content(content)</code>","text":"<p>Set the message content of the Webhook.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str | None</code> <p>Message content. If set to None, the message content is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_content(self: Self, content: str | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set the message content of the Webhook.\n\n    Arguments:\n        content (str | None): Message content. If set to None, the message content\n            is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.content = content\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_flag","title":"<code>set_flag(flag, value)</code>","text":"<p>Set a Message Flag for the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code>MessageFlag</code> <p>A Discord Message Flag.</p> required <code>value</code> <code>Literal[True] | None</code> <p>Toggle the Message Flag. If set to None, the flag is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_flag(\n    self: Self, flag: MessageFlags, value: Literal[True] | None\n) -&gt; \"Webhook\":\n    \"\"\"\n    Set a Message Flag for the Webhook instance.\n\n    Arguments:\n        flag (MessageFlag): A Discord Message Flag.\n\n        value (Literal[True] | None): Toggle the Message Flag. If set to None, the\n            flag is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    if not self.flags:\n        self.flags = 0\n\n    if value:\n        # Enable the Message Flag\n        self.flags |= flag\n    else:\n        # Disable the Message Flag\n        self.flags &amp;= ~flag\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_poll","title":"<code>set_poll(poll)</code>","text":"<p>Set a Poll for the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>poll</code> <code>Poll</code> <p>A Discord Poll object.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_poll(self: Self, poll: Poll) -&gt; \"Webhook\":\n    \"\"\"\n    Set a Poll for the Webhook instance.\n\n    Arguments:\n        poll (Poll): A Discord Poll object.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.poll = poll\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_thread_id","title":"<code>set_thread_id(thread_id)</code>","text":"<p>Set the thread to message within the Webhook's channel.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>str | None</code> <p>A thread ID. If set to None, the thread_id value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_thread_id(self: Self, thread_id: str | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set the thread to message within the Webhook's channel.\n\n    Arguments:\n        thread_id (str | None): A thread ID. If set to None, the thread_id value\n            is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    key: str = \"thread_id\"\n\n    if thread_id is None:\n        if self._query_params.get(key):\n            self._query_params.pop(key)\n    else:\n        self._query_params[key] = thread_id\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_thread_name","title":"<code>set_thread_name(thread_name)</code>","text":"<p>Set the name of the thread to create.</p> <p>Requires the Webhook channel to be a forum or media channel.</p> <p>Parameters:</p> Name Type Description Default <code>thread_name</code> <code>str | None</code> <p>A thread name. If set to None, the thread_name value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_thread_name(self: Self, thread_name: str | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set the name of the thread to create.\n\n    Requires the Webhook channel to be a forum or media channel.\n\n    Arguments:\n        thread_name (str | None): A thread name. If set to None, the thread_name value\n            is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.thread_name = thread_name\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_tts","title":"<code>set_tts(tts)</code>","text":"<p>Set whether the Webhook instance is a text-to-speech message.</p> <p>Parameters:</p> Name Type Description Default <code>tts</code> <code>bool | None</code> <p>Toggle text-to-speech functionality. If set to None, the tts value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_tts(self: Self, tts: bool | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set whether the Webhook instance is a text-to-speech message.\n\n    Arguments:\n        tts (bool | None): Toggle text-to-speech functionality. If set to None, the\n            tts value is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.tts = tts\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_url","title":"<code>set_url(url)</code>","text":"<p>Set the URL of the Webhook.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>A Discord Webhook URL.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_url(self: Self, url: str) -&gt; \"Webhook\":\n    \"\"\"\n    Set the URL of the Webhook.\n\n    Arguments:\n        url (str): A Discord Webhook URL.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.url = HttpUrl(url)\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_username","title":"<code>set_username(username)</code>","text":"<p>Set the username of the Webhook instance.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str | None</code> <p>A username. If set to None, the username is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_username(self: Self, username: str | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set the username of the Webhook instance.\n\n    Arguments:\n        username (str | None): A username. If set to None, the username is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    self.username = username\n\n    return self\n</code></pre>"},{"location":"webhook/#clyde.webhook.Webhook.set_wait","title":"<code>set_wait(wait)</code>","text":"<p>Set whether to wait for the Webhook request response from Discord.</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>bool | None</code> <p>Toggle wait functionality. If set to None, the wait value is cleared.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Webhook</code> <p>The modified Webhook instance.</p> Source code in <code>clyde/webhook.py</code> <pre><code>def set_wait(self: Self, wait: bool | None) -&gt; \"Webhook\":\n    \"\"\"\n    Set whether to wait for the Webhook request response from Discord.\n\n    Arguments:\n        wait (bool | None): Toggle wait functionality. If set to None, the wait value\n            is cleared.\n\n    Returns:\n        self (Webhook): The modified Webhook instance.\n    \"\"\"\n    key: str = \"wait\"\n\n    if wait is None:\n        if self._query_params.get(key):\n            self._query_params.pop(key)\n    else:\n        self._query_params[key] = str(wait)\n\n    return self\n</code></pre>"}]}